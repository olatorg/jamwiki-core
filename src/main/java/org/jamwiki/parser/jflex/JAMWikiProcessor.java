/* The following code was generated by JFlex 1.4.1 on 1/22/07 9:57 AM */

/*
 * This class implements the MediaWiki syntax (http://meta.wikimedia.org/wiki/Help:Editing).
 * It will also escape any HTML tags that have not been specifically allowed to be
 * present.
 */
package org.jamwiki.parser.jflex;

import org.jamwiki.Environment;
import org.jamwiki.parser.ParserInput;
import org.jamwiki.parser.ParserDocument;
import org.jamwiki.parser.TableOfContents;
import org.jamwiki.utils.WikiLogger;
import org.jamwiki.utils.Utilities;
import org.springframework.util.StringUtils;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 1/22/07 9:57 AM from the specification file
 * <tt>/home/guido/workspace/jamwiki-olat/src/lex/jamwiki-processor.jflex</tt>
 */
public class JAMWikiProcessor extends AbstractLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int LIST = 12;
  public static final int NORMAL = 2;
  public static final int TH = 8;
  public static final int TABLE = 4;
  public static final int YYINITIAL = 0;
  public static final int WIKIPRE = 18;
  public static final int TD = 6;
  public static final int PRE = 14;
  public static final int TC = 10;
  public static final int JAVASCRIPT = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  2,  1,  3,  4,  5,  6,  7,  1,  3,  1,  8,  9,  9, 
    10, 10, 11, 12
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\30\1\2\1\0\1\0\1\1\22\0\1\15\1\52\1\0"+
    "\1\4\2\0\1\3\1\12\2\0\1\13\1\56\1\0\1\10\1\0"+
    "\1\24\12\5\1\61\1\6\1\14\1\11\1\23\2\0\1\40\1\31"+
    "\1\34\1\41\1\27\1\44\1\32\1\45\1\21\1\7\1\22\1\33"+
    "\1\43\1\16\1\17\1\25\1\35\1\26\1\46\1\37\1\36\1\42"+
    "\1\20\1\7\1\47\1\50\1\57\1\0\1\60\1\0\1\51\1\0"+
    "\1\40\1\31\1\34\1\41\1\27\1\44\1\32\1\45\1\21\1\7"+
    "\1\22\1\33\1\43\1\16\1\17\1\25\1\35\1\26\1\46\1\37"+
    "\1\36\1\42\1\20\1\7\1\47\1\50\1\54\1\53\1\55\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\15\0\17\1\1\2\5\1\1\2\15\1\4\3\2\0"+
    "\1\4\33\0\1\5\3\0\1\6\1\7\14\0\1\10"+
    "\1\0\12\10\1\11\1\12\1\13\1\10\1\14\7\15"+
    "\1\7\13\15\7\0\1\16\3\0\1\17\44\0\1\6"+
    "\1\0\1\20\14\0\1\21\50\0\24\15\3\0\1\22"+
    "\47\0\1\23\52\0\21\15\25\0\1\24\23\0\1\25"+
    "\51\0\1\15\1\24\14\15\1\25\1\15\113\0\16\15"+
    "\1\26\25\0\1\27\1\30\1\0\1\31\36\0\5\15"+
    "\1\27\1\30\1\15\1\31\4\15\20\0\1\32\6\0"+
    "\1\2\16\0\11\15\25\0\1\33\1\0\1\30\7\0"+
    "\1\34\2\0\5\15\1\33\1\15\1\30\1\15\1\35"+
    "\42\0\12\15\4\0\1\36\36\0\12\15\3\0\1\37"+
    "\17\0\1\40\7\0\3\15\1\40\5\15\2\0\1\41"+
    "\1\42\12\0\1\25\4\15\1\25\11\0\6\15\12\0"+
    "\1\43\7\15\1\43\11\0\7\15\1\44\7\0\1\44"+
    "\6\15\1\0\1\25\3\0\1\25\3\15\2\0\2\15"+
    "\2\0\2\15\1\0\1\15";

  private static int [] zzUnpackAction() {
    int [] result = new int[940];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\0\0\u028a\0\u02bc"+
    "\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c"+
    "\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc"+
    "\0\u060e\0\u0640\0\u0672\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u076c"+
    "\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc"+
    "\0\0\0\u092e\0\u02bc\0\u08fc\0\u0960\0\u0992\0\u09c4\0\u09f6"+
    "\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86"+
    "\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16"+
    "\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6"+
    "\0\u0ed8\0\u0f0a\0\0\0\u044c\0\u0f3c\0\u0f6e\0\u04b0\0\0"+
    "\0\u04e2\0\u0fa0\0\u0546\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a"+
    "\0\u10cc\0\u10fe\0\u1130\0\u1162\0\0\0\u1194\0\u11c6\0\u11f8"+
    "\0\u122a\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388"+
    "\0\0\0\0\0\u13ba\0\u13ba\0\0\0\u06d6\0\u13ec\0\u141e"+
    "\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u06d6\0\u073a\0\u1518\0\u154a"+
    "\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676\0\u16a8\0\u16da"+
    "\0\u0898\0\u170c\0\u08ca\0\u173e\0\u08fc\0\u1770\0\u17a2\0\0"+
    "\0\u17d4\0\u1806\0\u1838\0\0\0\u186a\0\u189c\0\u18ce\0\u1900"+
    "\0\u1932\0\u1964\0\u1996\0\u19c8\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90"+
    "\0\u1ac2\0\u1af4\0\u1b26\0\u1b58\0\u1b8a\0\u1bbc\0\u1bee\0\u1c20"+
    "\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d4c\0\u1d7e\0\u1db0"+
    "\0\u1de2\0\u1e14\0\u1e46\0\u1e78\0\u1eaa\0\u1edc\0\u1f0e\0\u1f40"+
    "\0\u1f72\0\u1fa4\0\0\0\u1fd6\0\u2008\0\u203a\0\u206c\0\u209e"+
    "\0\u20d0\0\u2102\0\u2134\0\u2166\0\u2198\0\u21ca\0\u21fc\0\0"+
    "\0\u222e\0\u2260\0\u2292\0\u22c4\0\u22f6\0\u2328\0\u235a\0\u238c"+
    "\0\u23be\0\u11c6\0\u11f8\0\u122a\0\u125c\0\u128e\0\u12c0\0\u12f2"+
    "\0\u1324\0\u1356\0\u1388\0\u23f0\0\u2422\0\u2454\0\u2486\0\u24b8"+
    "\0\u24ea\0\u251c\0\u254e\0\u2580\0\u25b2\0\u25e4\0\u13ba\0\u2616"+
    "\0\u2648\0\u267a\0\u26ac\0\u26de\0\u2710\0\u2742\0\u2774\0\u27a6"+
    "\0\u27d8\0\u280a\0\u283c\0\u286e\0\u28a0\0\u28d2\0\u2904\0\u2936"+
    "\0\u2968\0\u299a\0\u29cc\0\u29fe\0\u2a30\0\u2a62\0\u2a94\0\u2ac6"+
    "\0\u2af8\0\u2b2a\0\u2b5c\0\u2b8e\0\u2bc0\0\u2bf2\0\u2c24\0\0"+
    "\0\u2c56\0\u2c88\0\u2cba\0\u2cec\0\u2d1e\0\u2d50\0\u2d82\0\u2db4"+
    "\0\u2de6\0\u2e18\0\u2e4a\0\u2e7c\0\u2eae\0\u2ee0\0\u2f12\0\u2f44"+
    "\0\u2f76\0\u2fa8\0\u2fda\0\u300c\0\u303e\0\u3070\0\u30a2\0\u30d4"+
    "\0\u3106\0\u3138\0\u316a\0\u319c\0\u31ce\0\u3200\0\u3232\0\u3264"+
    "\0\u3296\0\u32c8\0\u32fa\0\u332c\0\u335e\0\u3390\0\u33c2\0\0"+
    "\0\u33f4\0\u3426\0\u3458\0\u348a\0\u34bc\0\u34ee\0\u3520\0\u3552"+
    "\0\u3584\0\u35b6\0\u35e8\0\u361a\0\u364c\0\u367e\0\u36b0\0\u36e2"+
    "\0\u3714\0\u3746\0\u3778\0\u37aa\0\u37dc\0\u380e\0\u3840\0\u3872"+
    "\0\u38a4\0\u38d6\0\u3908\0\u393a\0\u396c\0\u399e\0\u39d0\0\u3a02"+
    "\0\u3a34\0\u3a66\0\u3a98\0\u3aca\0\u3afc\0\u3b2e\0\u3b60\0\u3b92"+
    "\0\u3bc4\0\u3bf6\0\u3c28\0\u3c5a\0\u3c8c\0\u3cbe\0\u3cf0\0\u3d22"+
    "\0\u3d54\0\u3d86\0\u3db8\0\u3dea\0\u3e1c\0\u3e4e\0\u3e80\0\u3eb2"+
    "\0\u3ee4\0\u3f16\0\u3f48\0\u3f7a\0\u3fac\0\u3fde\0\u4010\0\u4042"+
    "\0\u4074\0\u40a6\0\u40d8\0\u410a\0\u413c\0\u416e\0\u41a0\0\u41d2"+
    "\0\u4204\0\u4236\0\u4268\0\u429a\0\u42cc\0\u42fe\0\u4330\0\u4362"+
    "\0\0\0\u4394\0\u43c6\0\u43f8\0\u442a\0\u445c\0\u448e\0\u44c0"+
    "\0\u44f2\0\u4524\0\u4556\0\u4588\0\u45ba\0\u45ec\0\u461e\0\u4650"+
    "\0\u4682\0\u46b4\0\u46e6\0\u4718\0\0\0\u474a\0\u477c\0\u47ae"+
    "\0\u47e0\0\u4812\0\u4844\0\u4876\0\u48a8\0\u48da\0\u490c\0\u493e"+
    "\0\u4970\0\u49a2\0\u49d4\0\u4a06\0\u4a38\0\u4a6a\0\u4a9c\0\u4ace"+
    "\0\u4b00\0\u4b32\0\u4b64\0\u4b96\0\u4bc8\0\u4bfa\0\u4c2c\0\u4c5e"+
    "\0\u4c90\0\u4cc2\0\u4cf4\0\u4d26\0\u4d58\0\u4d8a\0\u4dbc\0\u4dee"+
    "\0\u4e20\0\u4e52\0\u4e84\0\u4eb6\0\u4ee8\0\u4f1a\0\u4f4c\0\u06d6"+
    "\0\u4f7e\0\u4fb0\0\u4fe2\0\u5014\0\u5046\0\u5078\0\u50aa\0\u50dc"+
    "\0\u510e\0\u5140\0\u5172\0\u51a4\0\u06d6\0\u51d6\0\u5208\0\u523a"+
    "\0\u526c\0\u529e\0\u52d0\0\u5302\0\u5334\0\u5366\0\u5398\0\u53ca"+
    "\0\u53fc\0\u542e\0\u5460\0\u5492\0\u54c4\0\u54f6\0\u5528\0\u555a"+
    "\0\u558c\0\u55be\0\u55f0\0\u5622\0\u5654\0\u5686\0\u56b8\0\u56ea"+
    "\0\u571c\0\u574e\0\u5780\0\u57b2\0\u57e4\0\u5816\0\u5848\0\u587a"+
    "\0\u58ac\0\u58de\0\u5910\0\u5942\0\u5974\0\u59a6\0\u59d8\0\u5a0a"+
    "\0\u5a3c\0\u5a6e\0\u5aa0\0\u5ad2\0\u5b04\0\u5b36\0\u5b68\0\u5b9a"+
    "\0\u5bcc\0\u5bfe\0\u5c30\0\u5c62\0\u5c94\0\u5cc6\0\u5cf8\0\u5d2a"+
    "\0\u5d5c\0\u5d8e\0\u5dc0\0\u5df2\0\u5e24\0\u5e56\0\u5e88\0\u5eba"+
    "\0\u5eec\0\u5f1e\0\u5f50\0\u5f82\0\u5fb4\0\u5fe6\0\u6018\0\u604a"+
    "\0\u607c\0\u60ae\0\u60e0\0\u6112\0\u6144\0\u6176\0\u61a8\0\u61da"+
    "\0\u620c\0\u623e\0\u6270\0\u62a2\0\u62d4\0\u6306\0\u6338\0\0"+
    "\0\u636a\0\u639c\0\u63ce\0\u6400\0\u6432\0\u6464\0\u6496\0\u64c8"+
    "\0\u64fa\0\u652c\0\u655e\0\u6590\0\u65c2\0\u65f4\0\u6626\0\u6658"+
    "\0\u668a\0\u66bc\0\u66ee\0\u6720\0\u6752\0\0\0\u5848\0\u6784"+
    "\0\0\0\u67b6\0\u67e8\0\u681a\0\u684c\0\u687e\0\u68b0\0\u68e2"+
    "\0\u6914\0\u6946\0\u6978\0\u69aa\0\u69dc\0\u6a0e\0\u6a40\0\u6a72"+
    "\0\u6aa4\0\u6ad6\0\u6b08\0\u6b3a\0\u6b6c\0\u6b9e\0\u6bd0\0\u6c02"+
    "\0\u6c34\0\u6c66\0\u6c98\0\u6cca\0\u6cfc\0\u6d2e\0\u6d60\0\u6d92"+
    "\0\u6dc4\0\u6df6\0\u6e28\0\u6e5a\0\u06d6\0\u620c\0\u6e8c\0\u06d6"+
    "\0\u6ebe\0\u6ef0\0\u6f22\0\u6f54\0\u6f86\0\u6fb8\0\u6fea\0\u701c"+
    "\0\u704e\0\u7080\0\u70b2\0\u70e4\0\u7116\0\u7148\0\u717a\0\u71ac"+
    "\0\u71de\0\u7210\0\u7242\0\u7274\0\0\0\u72a6\0\u72d8\0\u730a"+
    "\0\u733c\0\u736e\0\u73a0\0\0\0\u73d2\0\u7404\0\u7436\0\u7468"+
    "\0\u749a\0\u74cc\0\u74fe\0\u7530\0\u7562\0\u7594\0\u75c6\0\u75f8"+
    "\0\u762a\0\u765c\0\u768e\0\u76c0\0\u76f2\0\u7724\0\u7756\0\u7788"+
    "\0\u77ba\0\u77ec\0\u781e\0\u7850\0\u7882\0\u78b4\0\u78e6\0\u7918"+
    "\0\u794a\0\u797c\0\u79ae\0\u79e0\0\u7a12\0\u7a44\0\u7a76\0\u7aa8"+
    "\0\u7ada\0\u7b0c\0\u7b3e\0\u7b70\0\u7ba2\0\u7bd4\0\u7c06\0\u7c38"+
    "\0\0\0\u7c6a\0\0\0\u7c9c\0\u7cce\0\u7d00\0\u7d32\0\u7d64"+
    "\0\u7d96\0\u7dc8\0\0\0\u7dfa\0\u7e2c\0\u7e5e\0\u7e90\0\u7ec2"+
    "\0\u7ef4\0\u7f26\0\u06d6\0\u7f58\0\u06d6\0\u7f8a\0\0\0\u7fbc"+
    "\0\u7fee\0\u8020\0\u8052\0\u8084\0\u80b6\0\u80e8\0\u811a\0\u814c"+
    "\0\u817e\0\u81b0\0\u81e2\0\u8214\0\u8246\0\u8278\0\u82aa\0\u82dc"+
    "\0\u830e\0\u8340\0\u8372\0\u83a4\0\u83d6\0\u8408\0\u843a\0\u846c"+
    "\0\u849e\0\u84d0\0\u8502\0\u8534\0\u8566\0\u8598\0\u85ca\0\u85fc"+
    "\0\u862e\0\u8660\0\u8692\0\u86c4\0\u86f6\0\u8728\0\u875a\0\u878c"+
    "\0\u87be\0\u87f0\0\u8822\0\u8854\0\u8886\0\u88b8\0\u88ea\0\0"+
    "\0\u891c\0\u894e\0\u8980\0\u89b2\0\u89e4\0\u8a16\0\u8a48\0\u8a7a"+
    "\0\u8aac\0\u8ade\0\u8b10\0\u8b42\0\u8b74\0\u8ba6\0\u8bd8\0\u8c0a"+
    "\0\u8c3c\0\u8c6e\0\u8ca0\0\u8cd2\0\u8d04\0\u8d36\0\u8d68\0\u8d9a"+
    "\0\u8dcc\0\u8dfe\0\u8e30\0\u8e62\0\u8e94\0\u8ec6\0\u8ef8\0\u8f2a"+
    "\0\u8f5c\0\u8f8e\0\u8fc0\0\u8ff2\0\u9024\0\u9056\0\u9088\0\u90ba"+
    "\0\u90ec\0\u911e\0\u9150\0\0\0\u9182\0\u91b4\0\u91e6\0\u9218"+
    "\0\u924a\0\u927c\0\u92ae\0\u92e0\0\u9312\0\u9344\0\u9376\0\u93a8"+
    "\0\u93da\0\u940c\0\u943e\0\0\0\u9470\0\u94a2\0\u94d4\0\u9506"+
    "\0\u9538\0\u956a\0\u959c\0\u95ce\0\u9600\0\u9632\0\u06d6\0\u9664"+
    "\0\u9696\0\u96c8\0\u96fa\0\u972c\0\u975e\0\u9790\0\0\0\0"+
    "\0\u97c2\0\u97f4\0\u9826\0\u9858\0\u988a\0\u98bc\0\u98ee\0\u9920"+
    "\0\u9952\0\u9984\0\u99b6\0\u99e8\0\u9a1a\0\u9a4c\0\u9a7e\0\u9ab0"+
    "\0\u9ae2\0\u9b14\0\u9b46\0\u9b78\0\u9baa\0\u9bdc\0\u99b6\0\u9c0e"+
    "\0\u9c40\0\u9c72\0\u9ca4\0\u9cd6\0\u9ab0\0\u9d08\0\u9d3a\0\u9d6c"+
    "\0\u9d9e\0\u9dd0\0\u9e02\0\u9e34\0\u9e66\0\u9e98\0\u9eca\0\u9efc"+
    "\0\u9f2e\0\0\0\u9f60\0\u9f92\0\u9fc4\0\u9ff6\0\ua028\0\ua05a"+
    "\0\ua08c\0\u06d6\0\ua0be\0\ua0f0\0\ua122\0\ua154\0\ua186\0\ua1b8"+
    "\0\ua1ea\0\ua21c\0\ua24e\0\ua280\0\ua2b2\0\ua2e4\0\ua316\0\ua348"+
    "\0\ua37a\0\ua3ac\0\0\0\ua3de\0\ua410\0\ua442\0\ua474\0\ua4a6"+
    "\0\ua4d8\0\ua50a\0\u06d6\0\ua53c\0\ua56e\0\ua5a0\0\ua5d2\0\ua604"+
    "\0\ua636\0\ua668\0\u9c40\0\ua69a\0\ua6cc\0\ua6fe\0\u9d3a\0\ua730"+
    "\0\ua762\0\ua794\0\ua7c6\0\ua7f8\0\ua82a\0\ua85c\0\ua88e\0\ua8c0"+
    "\0\ua8f2\0\ua924\0\ua956\0\ua988";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[940];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\62\0\1\16\1\17\1\16\1\20\6\16\1\21\1\16"+
    "\1\22\26\16\1\23\1\24\1\25\3\16\1\26\5\16"+
    "\1\27\3\16\1\17\1\16\1\20\1\30\1\16\1\30"+
    "\1\16\1\31\1\32\1\21\1\30\1\22\1\33\25\16"+
    "\1\23\1\24\1\25\3\16\1\26\2\16\1\34\2\16"+
    "\1\27\1\16\1\30\1\16\1\17\1\16\1\20\1\30"+
    "\1\16\1\30\3\16\1\21\1\30\1\22\1\33\25\16"+
    "\1\23\1\24\1\25\3\16\1\26\1\35\1\36\1\34"+
    "\2\16\1\27\1\16\1\30\1\16\1\17\1\16\1\20"+
    "\6\16\1\21\1\16\1\22\26\16\1\23\1\24\1\25"+
    "\3\16\1\26\1\16\1\37\3\16\1\27\3\16\1\17"+
    "\1\16\1\20\1\30\1\16\1\30\3\16\1\21\1\30"+
    "\1\22\1\33\25\16\1\23\1\24\1\25\3\16\1\26"+
    "\1\35\1\40\1\34\2\16\1\27\1\16\1\30\1\16"+
    "\1\17\1\16\1\20\6\16\1\21\1\16\1\22\26\16"+
    "\1\23\1\24\1\25\3\16\1\26\1\41\1\42\3\16"+
    "\1\27\3\16\1\17\1\16\1\20\1\30\1\16\1\30"+
    "\3\16\1\21\1\30\1\22\1\33\25\16\1\23\1\24"+
    "\1\25\3\16\1\26\1\43\1\44\1\34\2\16\1\27"+
    "\1\16\1\30\1\45\1\17\1\16\1\45\1\30\1\45"+
    "\1\30\4\45\1\30\1\46\1\47\25\45\1\50\1\51"+
    "\1\52\3\45\1\53\2\45\1\54\2\45\1\55\1\45"+
    "\1\30\1\16\1\17\1\16\1\20\10\16\1\56\46\16"+
    "\1\17\12\16\1\57\46\16\1\17\1\16\1\20\10\16"+
    "\1\60\45\16\1\61\1\62\1\61\1\63\10\61\1\64"+
    "\1\33\44\61\2\0\1\16\63\0\1\65\2\0\1\66"+
    "\6\0\5\66\2\0\3\66\1\0\20\66\23\0\1\67"+
    "\64\0\1\70\1\71\2\0\1\72\2\0\1\73\1\74"+
    "\1\75\1\76\1\0\1\77\2\0\1\100\1\0\1\101"+
    "\1\102\1\0\1\103\1\104\1\105\1\106\1\107\1\110"+
    "\3\0\1\111\47\0\1\112\42\0\1\113\15\0\1\114"+
    "\61\0\1\115\73\0\1\116\53\0\1\117\1\120\1\121"+
    "\11\0\1\122\2\0\1\123\2\0\1\123\1\124\1\123"+
    "\1\124\4\123\1\124\45\123\1\124\10\0\1\125\51\0"+
    "\2\126\1\0\6\126\1\127\50\126\1\130\2\0\12\130"+
    "\1\131\12\130\1\0\31\130\53\0\1\132\23\0\1\133"+
    "\1\134\1\0\1\135\5\0\1\136\2\0\1\137\2\0"+
    "\1\140\3\0\1\141\1\0\1\142\2\0\1\143\1\144"+
    "\13\0\10\145\1\146\4\145\1\147\1\150\1\145\1\151"+
    "\5\145\1\152\2\145\1\153\2\145\1\154\3\145\1\155"+
    "\1\145\1\156\2\145\1\157\1\160\6\145\1\161\1\162"+
    "\3\145\53\0\1\163\6\0\10\145\1\146\4\145\1\147"+
    "\1\150\1\145\1\151\5\145\1\152\2\145\1\153\2\145"+
    "\1\154\3\145\1\155\1\145\1\156\2\145\1\157\1\160"+
    "\4\145\1\164\1\145\1\161\1\162\3\145\52\0\1\165"+
    "\62\0\1\165\23\0\1\133\1\134\1\0\1\135\5\0"+
    "\1\136\2\0\1\137\2\0\1\140\3\0\1\141\1\0"+
    "\1\142\2\0\1\143\1\144\3\0\1\165\7\0\10\145"+
    "\1\146\4\145\1\147\1\150\1\145\1\151\5\145\1\152"+
    "\2\145\1\153\2\145\1\154\3\145\1\155\1\145\1\156"+
    "\2\145\1\157\1\160\4\145\1\165\1\145\1\161\1\162"+
    "\3\145\2\166\1\0\61\166\1\0\12\166\1\167\1\170"+
    "\6\166\1\171\1\172\14\166\1\173\6\166\1\174\7\166"+
    "\1\175\1\166\1\0\12\175\1\176\12\175\1\166\31\175"+
    "\2\166\1\0\35\166\1\177\23\166\1\0\16\166\1\200"+
    "\15\166\1\201\24\166\1\0\34\166\1\202\24\166\1\0"+
    "\46\166\1\203\12\166\1\0\50\166\1\204\10\166\1\0"+
    "\40\166\1\205\1\206\1\207\11\166\1\210\2\166\15\0"+
    "\1\211\1\71\5\0\1\212\52\0\1\213\6\0\1\214"+
    "\52\0\1\215\1\71\45\0\1\61\64\0\1\216\63\0"+
    "\1\217\6\0\5\217\2\0\3\217\1\0\20\217\23\0"+
    "\1\220\64\0\1\70\1\71\2\0\1\72\2\0\1\73"+
    "\1\74\1\75\1\76\1\0\1\77\2\0\1\100\1\0"+
    "\1\101\1\102\1\0\1\103\1\104\1\105\1\106\1\107"+
    "\1\110\32\0\1\221\57\0\1\222\1\223\4\0\1\224"+
    "\1\225\52\0\1\73\3\0\1\72\3\0\1\101\1\0"+
    "\1\76\1\0\1\77\2\0\1\100\1\0\1\101\1\102"+
    "\1\0\1\103\1\104\1\0\1\106\1\107\1\226\30\0"+
    "\1\222\5\0\1\224\1\225\1\0\1\227\62\0\1\230"+
    "\75\0\1\101\33\0\1\222\3\0\1\231\1\0\1\224"+
    "\1\225\1\0\1\101\4\0\1\232\45\0\1\233\1\0"+
    "\1\234\5\0\1\235\10\0\1\236\36\0\1\222\5\0"+
    "\1\224\1\225\63\0\1\101\10\0\1\101\1\237\1\101"+
    "\3\0\1\101\35\0\1\240\5\0\1\241\72\0\1\107"+
    "\61\0\1\242\40\0\1\243\70\0\1\101\50\0\1\222"+
    "\5\0\1\224\1\225\1\244\6\0\1\245\1\0\1\246"+
    "\1\247\3\0\1\250\26\0\1\251\72\0\1\252\73\0"+
    "\1\253\53\0\1\254\73\0\1\255\40\0\1\256\20\0"+
    "\1\257\4\0\1\260\55\0\1\261\42\0\1\262\15\0"+
    "\1\263\61\0\1\264\22\0\1\265\2\0\12\265\1\266"+
    "\3\265\1\267\36\265\1\0\1\265\10\0\1\270\51\0"+
    "\2\126\1\0\6\126\1\271\50\126\1\132\1\272\1\273"+
    "\57\132\17\0\1\274\63\0\1\275\57\0\1\276\61\0"+
    "\1\277\12\0\1\300\46\0\1\301\7\0\1\302\3\0"+
    "\1\303\61\0\1\304\66\0\1\141\50\0\1\305\71\0"+
    "\1\306\23\0\1\307\1\310\12\0\1\146\1\311\1\0"+
    "\1\312\5\0\1\313\2\0\1\314\2\0\1\315\3\0"+
    "\1\316\1\0\1\317\2\0\1\320\1\321\30\0\1\322"+
    "\1\323\1\0\1\324\5\0\1\325\2\0\1\326\2\0"+
    "\1\327\3\0\1\330\1\0\1\331\2\0\1\332\1\333"+
    "\32\0\1\334\63\0\1\335\57\0\1\336\61\0\1\337"+
    "\12\0\1\340\46\0\1\341\7\0\1\342\3\0\1\343"+
    "\61\0\1\344\66\0\1\330\50\0\1\345\71\0\1\346"+
    "\37\0\1\347\1\350\1\0\1\351\5\0\1\352\2\0"+
    "\1\353\2\0\1\354\3\0\1\355\1\0\1\356\2\0"+
    "\1\357\1\360\13\0\2\166\1\0\12\166\1\167\1\170"+
    "\6\166\1\171\1\172\14\166\1\173\20\166\1\0\14\166"+
    "\1\361\44\166\1\0\23\166\1\362\35\166\1\0\24\166"+
    "\1\363\34\166\1\0\35\166\1\364\23\166\1\0\5\166"+
    "\1\365\53\166\1\0\16\166\1\366\42\166\1\0\30\166"+
    "\1\367\30\166\1\0\22\166\1\370\36\166\1\0\34\166"+
    "\1\371\24\166\1\0\13\166\1\372\20\166\1\373\4\166"+
    "\1\374\15\166\1\204\1\375\1\273\57\204\2\166\1\0"+
    "\35\166\1\376\23\166\1\0\16\166\1\377\15\166\1\u0100"+
    "\24\166\1\0\34\166\1\u0101\22\166\1\u0102\1\166\1\0"+
    "\12\u0102\1\u0103\3\u0102\1\u0104\36\u0102\1\166\1\u0102\15\0"+
    "\1\212\7\0\1\u0105\51\0\1\214\30\0\1\u0106\20\0"+
    "\1\u0107\62\0\1\u0108\1\u0109\6\0\5\u0109\2\0\3\u0109"+
    "\1\0\20\u0109\31\0\1\u010a\56\0\1\222\1\u010b\1\0"+
    "\1\u010c\1\u010d\1\0\1\224\1\225\1\0\1\u010e\2\0"+
    "\1\u010f\2\0\1\u0110\3\0\1\u0111\1\0\1\u0112\1\0"+
    "\1\u0113\1\u0114\1\u0115\61\0\1\101\30\0\1\225\5\0"+
    "\1\224\53\0\1\222\5\0\1\224\1\225\1\244\10\0"+
    "\1\246\1\247\3\0\1\250\45\0\1\u0116\76\0\1\u0117"+
    "\47\0\1\101\46\0\1\u0118\103\0\1\u0119\57\0\1\u0119"+
    "\40\0\1\u011a\70\0\1\u011b\65\0\1\u011c\72\0\1\101"+
    "\52\0\1\101\65\0\1\u011d\40\0\1\u011e\103\0\1\u011f"+
    "\47\0\1\u0120\60\0\1\101\3\0\1\101\56\0\1\u0121"+
    "\73\0\1\u0122\31\0\1\u0123\104\0\1\u0124\55\0\1\254"+
    "\113\0\1\u0125\25\0\1\u0126\53\0\1\u0127\61\0\1\u0128"+
    "\61\0\1\u0129\63\0\1\u012a\73\0\1\u012b\53\0\1\u012c"+
    "\73\0\1\u012d\22\0\1\265\2\0\55\265\1\u012e\2\265"+
    "\2\0\12\265\1\266\3\265\1\267\36\265\1\u012e\2\265"+
    "\2\0\40\265\1\u012f\14\265\1\u012e\1\265\10\0\1\u0130"+
    "\62\0\1\271\52\0\1\273\77\0\1\u0131\102\0\1\u0132"+
    "\40\0\1\u0133\67\0\1\u0134\67\0\1\u0135\60\0\1\u0133"+
    "\61\0\1\u0136\66\0\1\u0137\42\0\1\u0138\61\0\1\u0139"+
    "\107\0\1\u013a\14\0\1\310\76\0\1\u013b\63\0\1\u013c"+
    "\57\0\1\u013d\61\0\1\u013e\12\0\1\u013f\46\0\1\u0140"+
    "\7\0\1\u0141\3\0\1\u0142\61\0\1\u0143\66\0\1\316"+
    "\50\0\1\u0144\71\0\1\u0145\42\0\1\u0146\102\0\1\u0147"+
    "\40\0\1\u0148\67\0\1\u0149\67\0\1\u014a\60\0\1\u0148"+
    "\61\0\1\u014b\66\0\1\u014c\42\0\1\u014d\61\0\1\u014e"+
    "\107\0\1\u014f\31\0\1\u0150\63\0\1\u0151\57\0\1\u0152"+
    "\61\0\1\u0153\12\0\1\u0154\46\0\1\u0155\7\0\1\u0156"+
    "\3\0\1\u0157\61\0\1\u0158\66\0\1\355\50\0\1\u0159"+
    "\71\0\1\u015a\22\0\2\166\1\0\15\166\1\u015b\43\166"+
    "\1\0\24\166\1\u015c\34\166\1\0\41\166\1\u015d\17\166"+
    "\1\0\34\166\1\u015e\24\166\1\0\5\166\1\u015f\53\166"+
    "\1\0\30\166\1\u0160\30\166\1\0\24\166\1\370\34\166"+
    "\1\0\56\166\1\u0161\2\166\1\0\22\166\1\u0162\36\166"+
    "\1\0\14\166\1\u0163\44\166\1\0\14\166\1\u0164\44\166"+
    "\1\0\14\166\1\u0165\44\166\1\273\61\166\1\0\16\166"+
    "\1\u0166\42\166\1\0\30\166\1\u0167\30\166\1\0\22\166"+
    "\1\u0168\36\166\1\0\34\166\1\u0169\22\166\1\u0102\1\166"+
    "\1\0\55\u0102\1\u016a\2\u0102\1\166\1\0\12\u0102\1\u0103"+
    "\3\u0102\1\u0104\36\u0102\1\u016a\2\u0102\1\166\1\0\40\u0102"+
    "\1\u016b\14\u0102\1\u016a\1\u0102\26\0\1\u016c\67\0\1\u016d"+
    "\32\0\1\u016e\1\u0108\61\0\1\u0108\1\u016f\6\0\5\u016f"+
    "\2\0\3\u016f\1\0\20\u016f\32\0\1\u0170\57\0\1\u0171"+
    "\63\0\1\u0172\101\0\1\u0173\37\0\1\u0174\61\0\1\u0175"+
    "\12\0\1\u0176\5\0\1\u0177\40\0\1\u0178\7\0\1\u0179"+
    "\3\0\1\u017a\61\0\1\u017b\66\0\1\u017c\61\0\1\u017d"+
    "\50\0\1\u017e\53\0\1\u017f\15\0\1\u0180\37\0\1\u0116"+
    "\5\0\1\u0181\53\0\1\u0182\5\0\1\u0183\3\0\1\u0184"+
    "\66\0\1\u0185\54\0\1\101\71\0\1\u0186\61\0\1\u0187"+
    "\55\0\1\u0119\73\0\1\u0188\53\0\1\101\40\0\1\101"+
    "\64\0\1\u0189\57\0\1\u018a\1\0\1\u018b\73\0\1\241"+
    "\26\0\10\u0123\1\u018c\51\u0123\37\0\1\u018d\46\0\1\u018e"+
    "\103\0\1\254\12\0\1\u0125\37\0\1\u018f\56\0\1\u0190"+
    "\53\0\1\u0191\66\0\1\u0192\55\0\1\u012c\113\0\1\u0193"+
    "\25\0\1\u0194\114\0\1\u0195\1\0\1\265\2\0\35\265"+
    "\1\u0196\17\265\1\u012e\1\265\26\0\1\u0197\72\0\1\u0198"+
    "\70\0\1\u0199\54\0\1\u019a\37\0\1\u019b\75\0\1\u019c"+
    "\74\0\1\u019d\45\0\1\u019e\61\0\1\u019f\62\0\1\u01a0"+
    "\46\0\1\u01a1\102\0\1\u01a2\40\0\1\u01a3\67\0\1\u01a4"+
    "\67\0\1\u01a5\60\0\1\u01a3\61\0\1\u01a6\66\0\1\u01a7"+
    "\42\0\1\u01a8\61\0\1\u01a9\107\0\1\u01aa\40\0\1\u01ab"+
    "\72\0\1\u01ac\70\0\1\u01ad\54\0\1\u01ae\37\0\1\u01af"+
    "\75\0\1\u01b0\74\0\1\u01b1\45\0\1\u01b2\61\0\1\u01b3"+
    "\62\0\1\u01b4\46\0\1\u01b5\102\0\1\u01b6\40\0\1\u01b7"+
    "\67\0\1\u01b8\67\0\1\u01b9\60\0\1\u01b7\61\0\1\u01ba"+
    "\66\0\1\u01bb\42\0\1\u01bc\61\0\1\u01bd\107\0\1\u01be"+
    "\12\0\2\166\1\0\16\166\1\u01bf\42\166\1\0\12\166"+
    "\1\u015c\5\166\1\u01c0\40\166\1\0\12\166\1\u01c1\5\166"+
    "\1\u01c2\40\166\1\0\42\166\1\u01c3\14\166\2\u015f\1\u0123"+
    "\5\u015f\1\u01c4\51\u015f\2\166\1\0\34\166\1\u01c5\24\166"+
    "\1\0\21\166\1\u01c6\37\166\1\0\43\166\1\370\12\166"+
    "\1\u0161\2\166\1\0\34\166\1\u01c7\24\166\1\0\31\166"+
    "\1\u01c8\27\166\1\0\23\166\1\u01c9\35\166\1\0\30\166"+
    "\1\u01ca\30\166\1\0\24\166\1\u0168\34\166\1\0\56\166"+
    "\1\u01cb\2\166\1\0\22\166\1\u01cc\36\166\1\0\55\166"+
    "\1\u01cd\1\166\1\u0102\1\166\1\0\35\u0102\1\u01ce\17\u0102"+
    "\1\u016a\1\u0102\27\0\1\u01cf\60\0\1\u01d0\40\0\1\u01d1"+
    "\1\u0108\61\0\1\u0108\1\u01d2\6\0\5\u01d2\2\0\3\u01d2"+
    "\1\0\20\u01d2\33\0\1\u01d3\57\0\1\u01d4\102\0\1\u01d5"+
    "\31\0\1\u01d6\3\0\1\u01d7\5\0\1\224\1\225\55\0"+
    "\1\u01d8\67\0\1\u01d9\67\0\1\u01da\61\0\1\u01db\60\0"+
    "\1\u01dc\61\0\1\u01dd\55\0\1\u01de\10\0\1\u01df\42\0"+
    "\1\u01e0\15\0\1\u0173\55\0\1\u01e1\62\0\1\u01e2\46\0"+
    "\1\u01e3\110\0\1\u01e2\60\0\1\u01e4\27\0\1\u0182\1\u01e5"+
    "\4\0\1\u0183\36\0\14\u0183\1\u01e6\45\u0183\26\0\1\u01e7"+
    "\55\0\1\u01e8\66\0\1\107\53\0\1\u01e9\55\0\1\u01ea"+
    "\5\0\1\u01eb\63\0\1\u01ec\52\0\1\231\65\0\1\u0119"+
    "\37\0\10\u0123\1\u01ed\51\u0123\17\0\1\u01ee\66\0\1\u01ef"+
    "\54\0\1\u01f0\113\0\1\u01f1\44\0\1\u01f2\64\0\1\u01f3"+
    "\46\0\1\u01f4\103\0\1\u012c\12\0\1\u0193\1\265\2\0"+
    "\27\265\1\u01f5\25\265\1\u012e\1\265\40\0\1\u01f6\66\0"+
    "\1\u01f7\41\0\1\u01f8\63\0\1\u01f9\65\0\1\u01fa\53\0"+
    "\1\u01fb\20\0\1\u01fc\61\0\1\u01f7\31\0\1\u01f7\110\0"+
    "\1\u01fd\43\0\1\u01f7\60\0\1\u01fe\72\0\1\u01ff\70\0"+
    "\1\u0200\54\0\1\u0201\37\0\1\u0202\75\0\1\u0203\74\0"+
    "\1\u0204\45\0\1\u0205\61\0\1\u0206\62\0\1\u0207\66\0"+
    "\1\u0208\66\0\1\u0209\41\0\1\u020a\63\0\1\u020b\65\0"+
    "\1\u020c\53\0\1\u020d\20\0\1\u020e\61\0\1\u0209\31\0"+
    "\1\u0209\110\0\1\u020f\43\0\1\u0209\60\0\1\u0210\72\0"+
    "\1\u0211\70\0\1\u0212\54\0\1\u0213\37\0\1\u0214\75\0"+
    "\1\u0215\74\0\1\u0216\45\0\1\u0217\61\0\1\u0218\62\0"+
    "\1\u0219\26\0\2\166\1\0\17\166\1\u021a\41\166\1\0"+
    "\12\166\1\u01c1\1\u021b\4\166\1\u01c2\36\166\2\u01c2\1\u0183"+
    "\11\u01c2\1\u021c\45\u01c2\2\166\1\0\12\166\1\u021d\5\166"+
    "\1\u021e\36\166\2\u015f\1\u0123\5\u015f\1\u021f\51\u015f\2\166"+
    "\1\0\14\166\1\u0220\44\166\1\0\21\166\1\u0221\37\166"+
    "\1\0\14\166\1\u0222\44\166\1\0\46\166\1\u0223\12\166"+
    "\1\0\31\166\1\u0224\27\166\1\0\34\166\1\u0225\24\166"+
    "\1\0\21\166\1\u0226\37\166\1\0\43\166\1\u0168\12\166"+
    "\1\u01cb\1\u0102\1\166\1\0\27\u0102\1\u0227\25\u0102\1\u016a"+
    "\1\u0102\15\0\1\u01cf\5\0\1\u0228\57\0\1\u0229\46\0"+
    "\1\u0108\61\0\1\u0108\1\u01d1\6\0\5\u01d1\2\0\3\u01d1"+
    "\1\0\20\u01d1\32\0\1\u022a\66\0\1\u022b\72\0\1\u022c"+
    "\22\0\1\u022d\2\0\20\u022d\1\0\36\u022d\11\0\1\u01d6"+
    "\3\0\1\u01d7\1\u010b\1\0\1\u010c\1\u010d\1\0\1\224"+
    "\1\225\1\0\1\u010e\2\0\1\u010f\2\0\1\u0110\3\0"+
    "\1\u0111\1\0\1\u0112\1\0\1\u0113\1\u0114\1\u0115\61\0"+
    "\1\u022e\54\0\1\u022f\37\0\1\u0230\64\0\1\u0231\56\0"+
    "\1\u0232\26\0\1\u022e\46\0\1\u0233\66\0\1\u0232\67\0"+
    "\1\u0234\45\0\1\u0235\50\0\1\u01e0\67\0\1\u0173\64\0"+
    "\1\u0236\62\0\1\u01e2\66\0\1\u0237\21\0\14\u0183\2\u01e6"+
    "\6\u0183\1\u0238\35\u0183\27\0\1\u0239\67\0\1\u023a\43\0"+
    "\1\u011f\57\0\1\u01ea\1\u023b\4\0\1\u01eb\36\0\14\u01eb"+
    "\1\u023c\45\u01eb\37\0\1\u023d\22\0\10\u0123\1\u01ed\12\u0123"+
    "\1\u023e\36\u0123\61\0\1\u01ef\1\u023f\2\0\12\u023f\1\0"+
    "\12\u023f\1\0\31\u023f\34\0\1\u0240\76\0\1\u0241\37\0"+
    "\1\u0242\51\0\1\u0243\66\0\1\u0244\35\0\1\265\2\0"+
    "\24\265\1\u0245\30\265\1\u012e\1\265\25\0\1\u01f7\45\0"+
    "\1\u0246\3\0\1\u0247\1\134\1\0\1\135\5\0\1\136"+
    "\2\0\1\137\2\0\1\140\3\0\1\141\1\0\1\142"+
    "\2\0\1\143\1\144\4\0\1\u0248\46\0\1\u019e\47\0"+
    "\1\u01f7\52\0\1\u01f9\102\0\1\u0249\46\0\1\u024a\73\0"+
    "\1\u01f7\62\0\1\u024b\66\0\1\u024c\41\0\1\u024d\63\0"+
    "\1\u024e\65\0\1\u024f\53\0\1\u0250\20\0\1\u0251\61\0"+
    "\1\u024c\31\0\1\u024c\110\0\1\u0252\43\0\1\u024c\57\0"+
    "\1\u0209\45\0\1\u0253\3\0\1\u0254\1\323\1\0\1\324"+
    "\5\0\1\325\2\0\1\326\2\0\1\327\3\0\1\330"+
    "\1\0\1\331\2\0\1\332\1\333\4\0\1\u0255\46\0"+
    "\1\u01b2\47\0\1\u0209\52\0\1\u020b\102\0\1\u0256\46\0"+
    "\1\u0257\73\0\1\u0209\62\0\1\u0258\66\0\1\u0259\41\0"+
    "\1\u025a\63\0\1\u025b\65\0\1\u025c\53\0\1\u025d\20\0"+
    "\1\u025e\61\0\1\u0259\31\0\1\u0259\110\0\1\u025f\43\0"+
    "\1\u0259\32\0\2\166\1\0\16\166\1\u0260\42\166\1\0"+
    "\35\166\1\u0261\21\166\2\u01c2\1\u0183\11\u01c2\2\u021c\6\u01c2"+
    "\1\u0262\35\u01c2\2\166\1\0\12\166\1\u021d\1\u0263\4\166"+
    "\1\u021e\36\166\2\u021e\1\u01eb\11\u021e\1\u0264\45\u021e\2\u015f"+
    "\1\u0123\5\u015f\1\u021f\12\u015f\1\u0265\36\u015f\2\166\1\0"+
    "\56\166\1\u0221\1\u0266\1\166\1\0\12\u0266\1\166\12\u0266"+
    "\1\166\31\u0266\2\166\1\0\31\166\1\u0267\27\166\1\0"+
    "\46\166\1\u0268\12\166\1\0\24\166\1\u0269\34\166\1\0"+
    "\14\166\1\u026a\44\166\1\0\21\166\1\u026b\35\166\1\u0102"+
    "\1\166\1\0\24\u0102\1\u026c\30\u0102\1\u016a\1\u0102\25\0"+
    "\1\u026d\51\0\1\u022a\5\0\1\u026e\76\0\1\u026f\66\0"+
    "\1\u0173\14\0\1\u022d\2\0\20\u022d\1\224\36\u022d\25\0"+
    "\1\u0270\63\0\1\u0232\65\0\1\u0271\60\0\1\u0272\55\0"+
    "\1\u0173\60\0\1\u0273\20\0\1\u0274\61\0\1\u0173\31\0"+
    "\1\u0173\110\0\1\u0275\57\0\1\u0276\16\0\14\u0183\1\u01e6"+
    "\1\u0238\10\u0183\1\u0277\33\u0183\16\0\1\u0278\101\0\1\u0279"+
    "\63\0\1\u027a\21\0\14\u01eb\2\u023c\6\u01eb\1\u027b\35\u01eb"+
    "\15\0\1\u027c\5\0\1\u027d\1\u027e\106\0\1\u027f\47\0"+
    "\1\u0280\103\0\1\u0244\1\u0281\2\0\55\u0281\1\0\1\u0281"+
    "\1\265\2\0\55\265\1\u012e\1\u0282\1\u0283\2\0\20\u0283"+
    "\1\0\27\u0283\1\0\6\u0283\11\0\1\u0246\3\0\1\u0247"+
    "\1\134\1\0\1\135\5\0\1\136\2\0\1\137\2\0"+
    "\1\140\3\0\1\141\1\0\1\142\2\0\1\143\1\144"+
    "\13\0\53\u0284\1\0\6\u0284\41\0\1\u0285\60\0\1\u0286"+
    "\46\0\1\u024c\35\0\1\307\1\310\6\0\1\u0287\3\0"+
    "\1\u0288\1\311\1\0\1\312\5\0\1\313\2\0\1\314"+
    "\2\0\1\315\3\0\1\316\1\0\1\317\2\0\1\320"+
    "\1\321\53\0\1\u0205\47\0\1\u024c\52\0\1\u024e\102\0"+
    "\1\u0289\46\0\1\u028a\73\0\1\u024c\22\0\1\u028b\2\0"+
    "\20\u028b\1\0\27\u028b\1\0\6\u028b\11\0\1\u0253\3\0"+
    "\1\u0254\1\323\1\0\1\324\5\0\1\325\2\0\1\326"+
    "\2\0\1\327\3\0\1\330\1\0\1\331\2\0\1\332"+
    "\1\333\13\0\53\145\1\0\6\145\41\0\1\u028c\60\0"+
    "\1\u028d\46\0\1\u0259\45\0\1\u028e\3\0\1\u028f\1\350"+
    "\1\0\1\351\5\0\1\352\2\0\1\353\2\0\1\354"+
    "\3\0\1\355\1\0\1\356\2\0\1\357\1\360\4\0"+
    "\1\u0290\46\0\1\u0217\47\0\1\u0259\52\0\1\u025b\102\0"+
    "\1\u0291\46\0\1\u0292\73\0\1\u0259\22\0\2\166\1\0"+
    "\12\166\1\u0260\5\166\1\u0293\40\166\1\0\40\166\1\u0294"+
    "\16\166\2\u01c2\1\u0183\11\u01c2\1\u021c\1\u0262\10\u01c2\1\u0295"+
    "\33\u01c2\2\166\1\0\35\166\1\u0296\21\166\2\u021e\1\u01eb"+
    "\11\u021e\2\u0264\6\u021e\1\u0297\35\u021e\2\166\1\0\46\166"+
    "\1\u0298\12\166\1\0\34\166\1\u0299\24\166\1\0\56\166"+
    "\1\u026b\1\u029a\1\166\1\0\55\u029a\1\166\1\u029a\1\u0102"+
    "\1\166\1\0\55\u0102\1\u016a\1\u029b\37\0\1\u029c\22\0"+
    "\14\u026e\1\u029d\45\u026e\25\0\1\u0173\74\0\1\u0235\40\0"+
    "\1\u0232\70\0\1\u029e\73\0\1\u029f\46\0\1\u02a0\73\0"+
    "\1\u0173\51\0\1\u02a1\32\0\14\u0183\1\u01e6\12\u0183\1\u02a2"+
    "\32\u0183\34\0\1\u02a3\44\0\1\234\105\0\1\u02a4\16\0"+
    "\14\u01eb\1\u023c\1\u027b\25\u01eb\1\u02a5\16\u01eb\15\0\1\u027c"+
    "\1\u02a6\1\0\1\u02a7\1\u02a8\1\0\1\u027d\1\u027e\1\0"+
    "\1\u02a9\2\0\1\u02aa\2\0\1\u02ab\3\0\1\u02ac\1\0"+
    "\1\u02ad\1\0\1\u02ae\1\u02af\1\u02b0\30\0\1\u027e\5\0"+
    "\1\u027d\107\0\1\u02b1\27\0\1\u02b2\42\0\1\u0281\2\0"+
    "\55\u0281\1\u02b3\1\u0281\1\u0282\2\0\54\u0282\1\u02b4\1\u012e"+
    "\1\u0282\1\u0283\2\0\20\u0283\1\0\27\u0283\1\u0248\6\u0283"+
    "\41\0\1\u02b5\54\0\1\u02b5\25\0\1\u02b6\2\0\20\u02b6"+
    "\1\0\27\u02b6\1\0\6\u02b6\11\0\1\u0287\3\0\1\u0288"+
    "\1\311\1\0\1\312\5\0\1\313\2\0\1\314\2\0"+
    "\1\315\3\0\1\316\1\0\1\317\2\0\1\320\1\321"+
    "\54\0\1\u02b7\60\0\1\u02b8\21\0\1\u028b\2\0\20\u028b"+
    "\1\0\27\u028b\1\u0255\6\u028b\41\0\1\u02b9\54\0\1\u02b9"+
    "\25\0\1\u02ba\2\0\20\u02ba\1\0\27\u02ba\1\0\6\u02ba"+
    "\11\0\1\u028e\3\0\1\u028f\1\350\1\0\1\351\5\0"+
    "\1\352\2\0\1\353\2\0\1\354\3\0\1\355\1\0"+
    "\1\356\2\0\1\357\1\360\13\0\53\u02bb\1\0\6\u02bb"+
    "\41\0\1\u02bc\60\0\1\u02bd\21\0\2\u0293\1\u026e\11\u0293"+
    "\1\u02be\45\u0293\2\166\1\0\24\166\1\u02bf\32\166\2\u01c2"+
    "\1\u0183\11\u01c2\1\u021c\12\u01c2\1\u02c0\32\u01c2\2\166\1\0"+
    "\40\166\1\u02c1\16\166\2\u021e\1\u01eb\11\u021e\1\u0264\1\u0297"+
    "\25\u021e\1\u02c2\16\u021e\2\166\1\0\46\166\1\u02c3\12\166"+
    "\1\0\14\166\1\u02c4\42\166\1\u029a\1\166\1\0\55\u029a"+
    "\1\u02c5\1\u029a\1\u029b\1\166\1\0\54\u029b\1\u02c6\1\u016a"+
    "\1\u029b\15\0\1\u029c\5\0\1\u02c7\36\0\14\u026e\2\u029d"+
    "\6\u026e\1\u02c8\35\u026e\17\0\1\u02c9\103\0\1\u02ca\60\0"+
    "\1\u02cb\32\0\1\u02cc\3\0\1\u02a1\44\0\14\u0183\1\u01e6"+
    "\27\u0183\1\u02cd\15\u0183\27\0\1\u02ce\61\0\1\u02cf\32\0"+
    "\14\u01eb\1\u023c\23\u01eb\1\u02d0\21\u01eb\17\0\1\u02d1\63\0"+
    "\1\u02d2\101\0\1\u02d3\37\0\1\u02d4\61\0\1\u02d5\12\0"+
    "\1\u02d6\5\0\1\u02d7\40\0\1\u02d8\7\0\1\u02d9\3\0"+
    "\1\u02da\61\0\1\u02db\66\0\1\u02dc\61\0\1\u02dd\50\0"+
    "\1\u02de\53\0\1\u02df\15\0\1\u02e0\56\0\1\u02e1\25\0"+
    "\1\265\2\0\40\265\1\u02e2\1\u02e3\1\u02e4\11\265\1\u02e5"+
    "\1\u012e\1\265\21\0\1\u02e6\40\0\1\u02b6\1\307\1\310"+
    "\20\u02b6\1\0\27\u02b6\1\0\6\u02b6\41\0\1\u02e7\54\0"+
    "\1\u02e7\46\0\1\u02e8\40\0\1\u02ba\2\0\20\u02ba\1\0"+
    "\27\u02ba\1\u0290\6\u02ba\41\0\1\u02e9\54\0\1\u02e9\25\0"+
    "\2\u0293\1\u026e\11\u0293\2\u02be\6\u0293\1\u02ea\35\u0293\2\166"+
    "\1\0\6\166\1\u02eb\3\166\1\u02bf\44\166\2\u01c2\1\u0183"+
    "\11\u01c2\1\u021c\27\u01c2\1\u02ec\15\u01c2\2\166\1\0\24\166"+
    "\1\u02ed\32\166\2\u021e\1\u01eb\11\u021e\1\u0264\23\u021e\1\u02ee"+
    "\21\u021e\2\166\1\0\31\166\1\u02ef\25\166\1\u0102\1\166"+
    "\1\0\40\u0102\1\u02f0\1\u02f1\1\u02f2\11\u0102\1\u02f3\1\u016a"+
    "\1\u0102\14\u026e\1\u029d\1\u02c8\1\u02f4\43\u026e\36\0\1\u02f5"+
    "\64\0\1\u02f6\54\0\1\u02f6\25\0\1\u02f7\2\0\20\u02f7"+
    "\2\0\35\u02f7\14\u0183\1\u01e6\1\u02cd\5\u0183\1\u02f8\36\u0183"+
    "\46\0\1\u02f9\24\0\1\u02fa\3\0\1\u02cf\44\0\14\u01eb"+
    "\1\u023c\22\u01eb\1\u02fb\22\u01eb\20\0\1\u02fc\102\0\1\u02fd"+
    "\31\0\1\u02fe\3\0\1\u02ff\5\0\1\u027d\1\u027e\55\0"+
    "\1\u0300\67\0\1\u0301\67\0\1\u0302\61\0\1\u0303\60\0"+
    "\1\u0304\61\0\1\u0305\55\0\1\u0306\10\0\1\u0307\42\0"+
    "\1\u0308\15\0\1\u02d3\55\0\1\u0309\62\0\1\u030a\46\0"+
    "\1\u030b\110\0\1\u030a\60\0\1\u030c\63\0\1\u030d\10\0"+
    "\1\265\2\0\35\265\1\u030e\17\265\1\u012e\2\265\2\0"+
    "\16\265\1\u030f\15\265\1\u0310\20\265\1\u012e\2\265\2\0"+
    "\34\265\1\u0311\20\265\1\u012e\1\265\1\u0312\2\0\55\u0312"+
    "\1\u012e\1\u0312\16\0\1\u0313\64\0\1\u0314\56\0\1\u0315"+
    "\64\0\1\u0316\40\0\2\u0293\1\u026e\11\u0293\1\u02be\1\u02ea"+
    "\1\u0317\43\u0293\1\u0318\1\166\1\0\20\u0318\2\166\35\u0318"+
    "\2\u01c2\1\u0183\11\u01c2\1\u021c\1\u02ec\5\u01c2\1\166\36\u01c2"+
    "\2\166\1\0\6\166\1\u0319\3\166\1\u02ed\44\166\2\u021e"+
    "\1\u01eb\11\u021e\1\u0264\22\u021e\1\u031a\22\u021e\2\166\1\0"+
    "\46\166\1\u031b\10\166\1\u0102\1\166\1\0\35\u0102\1\u031c"+
    "\17\u0102\1\u016a\2\u0102\1\166\1\0\16\u0102\1\u031d\15\u0102"+
    "\1\u031e\20\u0102\1\u016a\2\u0102\1\166\1\0\34\u0102\1\u031f"+
    "\20\u0102\1\u016a\1\u0102\1\u0320\1\166\1\0\55\u0320\1\u016a"+
    "\1\u0320\14\u026e\1\u029d\2\u026e\1\u0321\42\u026e\16\0\1\u010d"+
    "\64\0\1\u0322\40\0\1\u02f7\2\0\20\u02f7\1\u0183\1\u0323"+
    "\35\u02f7\15\0\1\u02f9\5\0\1\u0324\1\u0325\35\0\1\u0326"+
    "\2\0\20\u0326\2\0\35\u0326\14\u01eb\1\u023c\30\u01eb\1\u0327"+
    "\14\u01eb\26\0\1\u0328\72\0\1\u0329\22\0\1\u032a\2\0"+
    "\20\u032a\1\0\36\u032a\11\0\1\u02fe\3\0\1\u02ff\1\u02a6"+
    "\1\0\1\u02a7\1\u02a8\1\0\1\u027d\1\u027e\1\0\1\u02a9"+
    "\2\0\1\u02aa\2\0\1\u02ab\3\0\1\u02ac\1\0\1\u02ad"+
    "\1\0\1\u02ae\1\u02af\1\u02b0\61\0\1\u032b\54\0\1\u032c"+
    "\37\0\1\u032d\64\0\1\u032e\56\0\1\u032f\26\0\1\u032b"+
    "\46\0\1\u0330\66\0\1\u032f\67\0\1\u0331\45\0\1\u0332"+
    "\50\0\1\u0308\67\0\1\u02d3\64\0\1\u0333\62\0\1\u030a"+
    "\77\0\1\u0334\10\0\1\265\2\0\16\265\1\u0335\36\265"+
    "\1\u012e\2\265\2\0\30\265\1\u0336\24\265\1\u012e\2\265"+
    "\2\0\22\265\1\u0337\32\265\1\u012e\2\265\2\0\34\265"+
    "\1\u0338\20\265\1\u012e\1\265\1\u0312\2\0\55\u0312\1\u0339"+
    "\1\u0312\32\0\1\u01f7\45\0\1\u033a\75\0\1\u0209\45\0"+
    "\1\u033b\43\0\2\u0293\1\u026e\11\u0293\1\u02be\2\u0293\1\u033c"+
    "\42\u0293\1\u0318\1\166\1\0\20\u0318\1\u01c2\1\166\35\u0318"+
    "\1\u033d\1\166\1\0\20\u033d\2\166\35\u033d\2\u021e\1\u01eb"+
    "\11\u021e\1\u0264\30\u021e\1\u033e\14\u021e\2\166\1\0\46\166"+
    "\1\u033f\10\166\1\u0102\1\166\1\0\16\u0102\1\u0340\36\u0102"+
    "\1\u016a\2\u0102\1\166\1\0\30\u0102\1\u0341\24\u0102\1\u016a"+
    "\2\u0102\1\166\1\0\22\u0102\1\u0342\32\u0102\1\u016a\2\u0102"+
    "\1\166\1\0\34\u0102\1\u0343\20\u0102\1\u016a\1\u0102\1\u0320"+
    "\1\166\1\0\55\u0320\1\u0344\1\u0320\14\u026e\1\u029d\3\u026e"+
    "\1\u0345\41\u026e\16\0\1\u0346\60\0\1\u0323\5\0\1\u0347"+
    "\53\0\1\u0325\5\0\1\u0324\36\0\1\u0326\2\0\20\u0326"+
    "\1\u01eb\1\0\35\u0326\14\u01eb\1\u023c\1\u0327\5\u01eb\1\u0348"+
    "\36\u01eb\40\0\1\u0349\66\0\1\u02d3\14\0\1\u032a\2\0"+
    "\20\u032a\1\u027d\36\u032a\25\0\1\u034a\63\0\1\u032f\65\0"+
    "\1\u034b\60\0\1\u034c\55\0\1\u02d3\60\0\1\u034d\20\0"+
    "\1\u034e\61\0\1\u02d3\31\0\1\u02d3\110\0\1\u034f\14\0"+
    "\1\265\2\0\30\265\1\u0350\24\265\1\u012e\2\265\2\0"+
    "\24\265\1\u0337\30\265\1\u012e\2\265\2\0\55\265\1\u012e"+
    "\1\u0351\1\265\2\0\22\265\1\u0352\32\265\1\u012e\1\265"+
    "\60\0\1\u0353\33\0\1\u024c\61\0\1\u0259\27\0\2\u0293"+
    "\1\u026e\11\u0293\1\u02be\3\u0293\1\u0354\41\u0293\1\u033d\1\166"+
    "\1\0\20\u033d\1\u021e\1\166\35\u033d\2\u021e\1\u01eb\11\u021e"+
    "\1\u0264\1\u033e\5\u021e\1\166\36\u021e\1\u0102\1\166\1\0"+
    "\30\u0102\1\u0355\24\u0102\1\u016a\2\u0102\1\166\1\0\24\u0102"+
    "\1\u0342\30\u0102\1\u016a\2\u0102\1\166\1\0\55\u0102\1\u016a"+
    "\1\u0356\1\u0102\1\166\1\0\22\u0102\1\u0357\32\u0102\1\u016a"+
    "\1\u0102\2\166\1\0\55\166\1\u0358\1\166\14\u026e\1\u029d"+
    "\4\u026e\1\u0359\40\u026e\32\0\1\u0173\54\0\1\u02d3\74\0"+
    "\1\u0332\40\0\1\u032f\70\0\1\u035a\73\0\1\u035b\46\0"+
    "\1\u035c\73\0\1\u02d3\22\0\1\265\2\0\34\265\1\u035d"+
    "\20\265\1\u012e\2\265\2\0\21\265\1\u035e\33\265\1\u012e"+
    "\2\265\2\0\43\265\1\u0337\11\265\1\u012e\1\u0351\1\u035f"+
    "\2\0\54\u035f\1\u0360\1\u0361\1\u035f\2\u0293\1\u026e\11\u0293"+
    "\1\u02be\4\u0293\1\u0362\40\u0293\1\u0102\1\166\1\0\34\u0102"+
    "\1\u0363\20\u0102\1\u016a\2\u0102\1\166\1\0\21\u0102\1\u0364"+
    "\33\u0102\1\u016a\2\u0102\1\166\1\0\43\u0102\1\u0342\11\u0102"+
    "\1\u016a\1\u0356\1\u0365\1\166\1\0\54\u0365\1\u0366\1\u0367"+
    "\1\u0365\14\u026e\1\u029d\5\u026e\1\u0368\37\u026e\17\0\1\u0369"+
    "\103\0\1\u036a\60\0\1\u036b\21\0\1\265\2\0\14\265"+
    "\1\u036c\40\265\1\u012e\2\265\2\0\21\265\1\u036d\33\265"+
    "\1\u012e\1\265\43\0\1\u036e\1\u036f\1\u0370\11\0\1\u0371"+
    "\62\0\1\u0372\1\0\2\u0293\1\u026e\11\u0293\1\u02be\5\u0293"+
    "\1\u0373\37\u0293\1\u0102\1\166\1\0\14\u0102\1\u0374\40\u0102"+
    "\1\u016a\2\u0102\1\166\1\0\21\u0102\1\u0375\33\u0102\1\u016a"+
    "\1\u0102\2\166\1\0\40\166\1\u0376\1\u0377\1\u0378\11\166"+
    "\1\u0379\4\166\1\0\55\166\1\u037a\1\166\14\u026e\1\u029d"+
    "\4\u026e\1\u037b\40\u026e\36\0\1\u037c\64\0\1\u037d\54\0"+
    "\1\u037d\25\0\1\265\2\0\55\265\1\u012e\1\u036d\1\u037e"+
    "\2\0\55\u037e\1\u012e\1\u037e\40\0\1\u037f\42\0\1\u0380"+
    "\15\0\1\u0381\61\0\1\u0382\22\0\1\u0383\2\0\55\u0383"+
    "\1\0\1\u0383\2\u0293\1\u026e\11\u0293\1\u02be\4\u0293\1\u0384"+
    "\40\u0293\1\u0102\1\166\1\0\55\u0102\1\u016a\1\u0375\1\u0385"+
    "\1\166\1\0\55\u0385\1\u016a\1\u0385\2\166\1\0\35\166"+
    "\1\u0386\23\166\1\0\16\166\1\u0387\15\166\1\u0388\24\166"+
    "\1\0\34\166\1\u0389\22\166\1\u038a\1\166\1\0\55\u038a"+
    "\1\166\1\u038a\14\u026e\1\u029d\1\u037b\5\u026e\1\u038b\36\u026e"+
    "\16\0\1\u02a8\64\0\1\u038c\40\0\1\u037e\2\0\55\u037e"+
    "\1\u038d\1\u037e\21\0\1\u038e\73\0\1\u038f\53\0\1\u0390"+
    "\73\0\1\u0391\22\0\1\u0383\2\0\55\u0383\1\u0392\1\u0383"+
    "\2\u0293\1\u026e\11\u0293\1\u02be\1\u0384\5\u0293\1\u0393\36\u0293"+
    "\1\u0385\1\166\1\0\55\u0385\1\u0394\1\u0385\2\166\1\0"+
    "\16\166\1\u0395\42\166\1\0\30\166\1\u0396\30\166\1\0"+
    "\22\166\1\u0397\36\166\1\0\34\166\1\u0398\22\166\1\u038a"+
    "\1\166\1\0\55\u038a\1\u0399\1\u038a\16\0\1\u039a\43\0"+
    "\1\u035f\2\0\54\u035f\1\u0360\1\u039b\1\u035f\33\0\1\u039c"+
    "\55\0\1\u0390\113\0\1\u039d\25\0\1\u039e\114\0\1\u035f"+
    "\1\0\1\u0365\1\166\1\0\54\u0365\1\u0366\1\u039f\1\u0365"+
    "\2\166\1\0\30\166\1\u03a0\30\166\1\0\24\166\1\u0397"+
    "\34\166\1\0\56\166\1\u03a1\2\166\1\0\22\166\1\u03a2"+
    "\36\166\1\0\55\166\1\u0365\1\166\32\0\1\u02d3\66\0"+
    "\1\u03a3\46\0\1\u03a4\103\0\1\u0390\12\0\1\u039d\2\166"+
    "\1\0\34\166\1\u03a5\24\166\1\0\21\166\1\u03a6\37\166"+
    "\1\0\43\166\1\u0397\12\166\1\u03a1\17\0\1\u03a7\66\0"+
    "\1\u03a8\35\0\2\166\1\0\14\166\1\u03a9\44\166\1\0"+
    "\21\166\1\u03aa\35\166\61\0\1\u03a8\1\u03ab\2\0\55\u03ab"+
    "\1\0\1\u03ab\2\166\1\0\56\166\1\u03aa\1\u03ac\1\166"+
    "\1\0\55\u03ac\1\166\1\u03ac\1\u03ab\2\0\55\u03ab\1\u035f"+
    "\1\u03ab\1\u03ac\1\166\1\0\55\u03ac\1\u0365\1\u03ac";

  private static int [] zzUnpackTrans() {
    int [] result = new int[43450];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\10\14\0\1\11\42\1\1\11\3\1\2\0\1\1"+
    "\33\0\1\11\3\0\1\1\1\11\14\0\1\11\1\0"+
    "\12\1\2\11\2\1\1\11\23\1\7\0\1\11\3\0"+
    "\1\11\44\0\1\1\1\0\1\11\14\0\1\11\50\0"+
    "\24\1\3\0\1\11\47\0\1\11\52\0\21\1\25\0"+
    "\1\11\23\0\1\11\51\0\20\1\113\0\16\1\1\11"+
    "\25\0\1\11\1\1\1\0\1\11\36\0\15\1\20\0"+
    "\1\11\6\0\1\11\16\0\11\1\25\0\1\11\1\0"+
    "\1\11\7\0\1\11\2\0\11\1\1\11\42\0\12\1"+
    "\4\0\1\11\36\0\12\1\3\0\1\11\17\0\1\11"+
    "\7\0\11\1\2\0\2\11\12\0\6\1\11\0\6\1"+
    "\12\0\1\11\10\1\11\0\7\1\1\11\7\0\7\1"+
    "\1\0\1\1\3\0\4\1\2\0\2\1\2\0\2\1"+
    "\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[940];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    protected static WikiLogger logger = WikiLogger.getLogger(JAMWikiProcessor.class.getName());
    protected boolean allowHTML = false;
    protected boolean allowJavascript = false;
    protected boolean wikibold = false;
    protected boolean wikiitalic = false;
    
    /**
     *
     */
    protected boolean allowJavascript() {
        return (allowJavascript && yystate() != PRE && yystate() != WIKIPRE);
    }
    
    /**
     *
     */
    protected String closeTable(int currentState) {
        String output = "";
        if (yystate() == TC) output = "</caption>";
        if (yystate() == TH) output = "</th>";
        if (yystate() == TD) output = "</td>";
        if ((yystate() == TC || yystate() == TH || yystate() == TD) && yystate() != currentState) endState();
        return output;
    }
    
    /**
     *
     */
    public void init(ParserInput parserInput, ParserDocument parserDocument, int mode) throws Exception {
        this.parserInput = parserInput;
        this.parserDocument = parserDocument;
        this.mode = mode;
        // validate parser settings
        boolean validated = true;
        if (this.mode != JFlexParser.MODE_PROCESS) validated = false;
        if (this.parserInput.getTableOfContents() == null) validated = false;
        if (this.parserInput.getTopicName() == null) validated = false;
        if (this.parserInput.getContext() == null) validated = false;
        if (this.parserInput.getVirtualWiki() == null) validated = false;
        if (!validated) {
            throw new Exception("Parser info not properly initialized");
        }
    }
    
    /**
     * Take Wiki text of the form "|" or "| style='foo' |" and convert to
     * and HTML <td> or <th> tag.
     *
     * @param text The text to be parsed.
     * @param tag The HTML tag text, either "td" or "th".
     * @param markup The Wiki markup for the tag, either "|" or "!"
     */
    protected String openTableCell(String text, String tag, char markup) {
        if (text == null) return "";
        text = text.trim();
        int pos = 0;
        while (pos < text.length() && text.charAt(pos) == markup) {
            pos++;
        }
        if (pos >= text.length()) {
            return "<" + tag + ">";
        }
        text = text.substring(pos);
        pos = text.indexOf(markup);
        if (pos != -1) text = text.substring(0, pos);
        String attributes = ParserUtil.validateHtmlTagAttributes(text.trim());
        if (StringUtils.hasText(attributes)) {
            return "<" + tag + " " + attributes + ">";
        }
        return "<" + tag + ">";
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JAMWikiProcessor(java.io.Reader in) {
      allowHTML = Environment.getBooleanValue(Environment.PROP_PARSER_ALLOW_HTML);
    allowJavascript = Environment.getBooleanValue(Environment.PROP_PARSER_ALLOW_JAVASCRIPT);
    yybegin(NORMAL);
    states.add(new Integer(yystate()));
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JAMWikiProcessor(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 180) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 25: 
          { logger.finer("toc: " + yytext() + " (" + yystate() + ")");
    this.parserInput.getTableOfContents().setStatus(TableOfContents.STATUS_TOC_INITIALIZED);
    this.parserInput.getTableOfContents().setForceTOC(true);
    return yytext();
          }
        case 37: break;
        case 35: 
          { logger.finer("imagelinkcaption: " + yytext() + " (" + yystate() + ")");
    WikiLinkTag parserTag = new WikiLinkTag();
    return this.parseToken(yytext(), parserTag);
          }
        case 38: break;
        case 3: 
          { logger.finer("wikipreend: " + yytext() + " (" + yystate() + ")");
    endState();
    // rollback the one non-pre character so it can be processed
    yypushback(1);
    return  "</pre>\n";
          }
        case 39: break;
        case 28: 
          { logger.finer("tablecellsstyle: " + yytext() + " (" + yystate() + ")");
    // one extra character matched by the pattern, so roll it back
    yypushback(1);
    return "</td>" + openTableCell(yytext(), "td", '|');
          }
        case 40: break;
        case 30: 
          { logger.finer("reference: " + yytext() + " (" + yystate() + ")");
    WikiReferenceTag parserTag = new WikiReferenceTag();
    return this.parseToken(yytext(), parserTag);
          }
        case 41: break;
        case 29: 
          { logger.finer("jsclose: " + yytext() + " (" + yystate() + ")");
    if (allowJavascript()) {
        endState();
        return ParserUtil.sanitizeHtmlTag(yytext());
    }
    return Utilities.escapeHTML(yytext());
          }
        case 42: break;
        case 18: 
          { logger.finer("entity: " + yytext() + " (" + yystate() + ")");
    CharacterTag parserTag = new CharacterTag();
    return this.parseToken(yytext(), parserTag);
          }
        case 43: break;
        case 34: 
          { logger.finer("math: " + yytext() + " (" + yystate() + ")");
    WikiMathTag parserTag = new WikiMathTag();
    return this.parseToken(yytext(), parserTag);
          }
        case 44: break;
        case 5: 
          { logger.finer("listitem: " + yytext() + " (" + yystate() + ")");
    if (yystate() != LIST) beginState(LIST);
    // one non-list character matched, roll it back
    yypushback(1);
    WikiListTag parserTag = new WikiListTag();
    return this.parseToken(yytext(), parserTag);
          }
        case 45: break;
        case 16: 
          { logger.finer("tablestart: " + yytext() + " (" + yystate() + ")");
    beginState(TABLE);
    String attributes = yytext().substring(2).trim();
    attributes = ParserUtil.validateHtmlTagAttributes(attributes);
    return ((StringUtils.hasText(attributes)) ? "<table " + attributes + ">" : "<table>");
          }
        case 46: break;
        case 1: 
          { // no need to log this
    CharacterTag parserTag = new CharacterTag();
    return this.parseToken(yytext(), parserTag);
          }
        case 47: break;
        case 13: 
          { logger.finer("listend: " + yytext() + " (" + yystate() + ")");
    String raw = yytext();
    // roll back any matches to allow re-parsing
    yypushback(raw.length());
    endState();
    WikiListTag parserTag = new WikiListTag();
    return this.parseToken(null, parserTag);
          }
        case 48: break;
        case 2: 
          { logger.finer("tableheading: " + yytext() + " (" + yystate() + ")");
    StringBuffer output = new StringBuffer();
    // if a column was already open, close it
    output.append(closeTable(TH));
    if (yystate() != TH) beginState(TH);
    if (yytext().trim().length() > 1) {
        int start = 1;
        int end = yytext().indexOf("|", start+1);
        String attributes = yytext().substring(start, end).trim();
        attributes = ParserUtil.validateHtmlTagAttributes(attributes);
        String tag = "<th>";
        if (StringUtils.hasText(attributes)) {
            tag = "<th " + attributes + ">";
        }
        output.append(tag);
        // extra character matched by regular expression so push it back
        yypushback(1);
    } else {
        output.append("<th>");
    }
    return output.toString();
          }
        case 49: break;
        case 17: 
          { logger.finer("tablerow: " + yytext() + " (" + yystate() + ")");
    StringBuffer output = new StringBuffer();
    // if a column was already open, close it
    int oldState = yystate();
    output.append(closeTable(TABLE));
    if (oldState != TABLE) output.append("</tr>");
    if (yytext().trim().length() > 2) {
        String attributes = yytext().substring(2).trim();
        attributes = ParserUtil.validateHtmlTagAttributes(attributes);
        String tag = "<tr>";
        if (StringUtils.hasText(attributes)) {
            tag = "<tr " + attributes + ">";
        }
        output.append(tag);
    } else {
        output.append("<tr>");
    }
    return output.toString();
          }
        case 50: break;
        case 23: 
          { logger.finer("htmlcomment: " + yytext() + " (" + yystate() + ")");
    HtmlCommentTag parserTag = new HtmlCommentTag();
    return this.parseToken(yytext(), parserTag);
          }
        case 51: break;
        case 7: 
          { logger.finer("wikiprestart: " + yytext() + " (" + yystate() + ")");
    // rollback the one non-pre character so it can be processed
    yypushback(yytext().length() - 1);
    if (yystate() != WIKIPRE) {
        beginState(WIKIPRE);
        return "<pre>";
    }
    return "";
          }
        case 52: break;
        case 31: 
          { logger.finer("references: " + yytext() + " (" + yystate() + ")");
    WikiReferencesTag parserTag = new WikiReferencesTag();
    return this.parseToken(yytext(), parserTag);
          }
        case 53: break;
        case 19: 
          { logger.finer("hr: " + yytext() + " (" + yystate() + ")");
    return "<hr />\n";
          }
        case 54: break;
        case 21: 
          { logger.finer("wikilink: " + yytext() + " (" + yystate() + ")");
    WikiLinkTag parserTag = new WikiLinkTag();
    return this.parseToken(yytext(), parserTag);
          }
        case 55: break;
        case 22: 
          { logger.finer("htmlpreend: " + yytext() + " (" + yystate() + ")");
    // state only changes to pre if allowHTML is true, so no need to check here
    endState();
    HtmlPreTag parserTag = new HtmlPreTag();
    return this.parseToken(yytext(), parserTag);
          }
        case 56: break;
        case 12: 
          { logger.finer("tableheadings: " + yytext() + " (" + yystate() + ")");
    return "</th><th>";
          }
        case 57: break;
        case 10: 
          { logger.finer("tablecaption: " + yytext() + " (" + yystate() + ")");
    StringBuffer output = new StringBuffer();
    output.append(closeTable(TC));
    beginState(TC);
    output.append("<caption>");
    return output.toString();
          }
        case 58: break;
        case 32: 
          { logger.finer("forcetoc: " + yytext() + " (" + yystate() + ")");
    this.parserInput.getTableOfContents().setForceTOC(true);
    return "";
          }
        case 59: break;
        case 33: 
          { logger.finer("referencenocontent: " + yytext() + " (" + yystate() + ")");
    WikiReferenceTag parserTag = new WikiReferenceTag();
    return this.parseToken(yytext(), parserTag);
          }
        case 60: break;
        case 27: 
          { logger.finer("notoc: " + yytext() + " (" + yystate() + ")");
    this.parserInput.getTableOfContents().setStatus(TableOfContents.STATUS_NO_TOC);
    return "";
          }
        case 61: break;
        case 8: 
          { logger.finer("tablecell: " + yytext() + " (" + yystate() + ")");
    StringBuffer output = new StringBuffer();
    // if a column was already open, close it
    output.append(closeTable(TD));
    if (yystate() != TD) beginState(TD);
    // extra character matched by both regular expressions so push it back
    yypushback(1);
    output.append(openTableCell(yytext(), "td", '|'));
    return output.toString();
          }
        case 62: break;
        case 24: 
          { logger.finer("htmllink: " + yytext() + " (" + yystate() + ")");
    HtmlLinkTag parserTag = new HtmlLinkTag();
    return this.parseToken(yytext(), parserTag);
          }
        case 63: break;
        case 14: 
          { logger.finer("bold: " + yytext() + " (" + yystate() + ")");
    wikibold = !wikibold;
    return (wikibold) ? "<b>" : "</b>";
          }
        case 64: break;
        case 9: 
          { logger.finer("tableend: " + yytext() + " (" + yystate() + ")");
    StringBuffer output = new StringBuffer();
    // if a column was already open, close it
    output.append(closeTable(TABLE));
    // end TABLE state
    endState();
    output.append("</tr></table>\n");
    return output.toString();
          }
        case 65: break;
        case 11: 
          { logger.finer("tablecells: " + yytext() + " (" + yystate() + ")");
    return "</td><td>";
          }
        case 66: break;
        case 26: 
          { logger.finer("jsopen: " + yytext() + " (" + yystate() + ")");
    if (allowJavascript()) {
        beginState(JAVASCRIPT);
        return ParserUtil.sanitizeHtmlTag(yytext());
    }
    return Utilities.escapeHTML(yytext());
          }
        case 67: break;
        case 4: 
          { logger.finer("italic: " + yytext() + " (" + yystate() + ")");
    wikiitalic = !wikiitalic;
    return (wikiitalic) ? "<i>" : "</i>";
          }
        case 68: break;
        case 15: 
          { logger.finer("htmltag: " + yytext() + " (" + yystate() + ")");
    HtmlTag parserTag = new HtmlTag();
    return this.parseToken(yytext(), parserTag);
          }
        case 69: break;
        case 36: 
          { logger.finer("nowiki: " + yytext() + " (" + yystate() + ")");
    WikiNowikiTag parserTag = new WikiNowikiTag();
    return this.parseToken(yytext(), parserTag);
          }
        case 70: break;
        case 6: 
          { logger.finer("wikiheading: " + yytext() + " (" + yystate() + ")");
    WikiHeadingTag parserTag = new WikiHeadingTag();
    return this.parseToken(yytext(), parserTag);
          }
        case 71: break;
        case 20: 
          { logger.finer("htmlprestart: " + yytext() + " (" + yystate() + ")");
    if (allowHTML) {
        beginState(PRE);
    }
    HtmlPreTag parserTag = new HtmlPreTag();
    return this.parseToken(yytext(), parserTag);
          }
        case 72: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {     StringBuffer output = new StringBuffer();
    if (wikibold) {
        wikibold = false;
        output.append("</b>");
    }
    if (wikiitalic) {
        wikiitalic = false;
        output.append( "</i>" );
    }
    // close any open list tags
    if (yystate() == LIST) {
        WikiListTag parserTag = new WikiListTag();
        output.append(this.parseToken(null, parserTag));
    }
    // close any open tables
    if (yystate() == TD) {
        output.append("</td>");
        endState();
    }
    if (yystate() == TH) {
        output.append("</th>");
        endState();
    }
    if (yystate() == TC) {
        output.append("</caption>");
        endState();
    }
    if (yystate() == TABLE) {
        output.append("</tr></table>");
        endState();
    }
    if (yystate() == PRE || yystate() == WIKIPRE) {
        output.append("</pre>");
        endState();
    }
    return (output.length() == 0) ? null : output.toString();
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
