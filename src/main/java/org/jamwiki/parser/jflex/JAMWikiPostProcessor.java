/* The following code was generated by JFlex 1.4.1 on 1/22/07 9:57 AM */

/*
 * This class adds paragraph tags as appropriate.
 */
package org.jamwiki.parser.jflex;

import org.jamwiki.parser.ParserInput;
import org.jamwiki.parser.ParserDocument;
import org.jamwiki.utils.WikiLogger;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 1/22/07 9:57 AM from the specification file
 * <tt>/home/guido/workspace/jamwiki-olat/src/lex/jamwiki-postprocessor.jflex</tt>
 */
public class JAMWikiPostProcessor extends AbstractLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int PRE = 1;
  public static final int NONPARAGRAPH = 4;
  public static final int P = 3;
  public static final int NORMAL = 2;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\0\1\1\22\0\1\5\16\0\1\14"+
    "\1\0\1\33\1\33\1\33\1\33\1\33\6\0\1\4\1\36\1\13"+
    "\2\0\1\27\1\30\1\21\1\25\1\17\1\24\1\0\1\26\1\11"+
    "\1\0\1\12\1\31\1\35\1\6\1\7\1\15\1\0\1\16\1\20"+
    "\1\22\1\34\1\32\1\10\7\0\1\23\1\0\1\37\1\30\1\21"+
    "\1\25\1\17\1\24\1\0\1\26\1\11\1\0\1\12\1\31\1\35"+
    "\1\6\1\7\1\15\1\0\1\16\1\20\1\22\1\34\1\32\1\10"+
    "\uff88\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\3\1\1\2\2\1\2\2\5\1\22\0\1\3"+
    "\6\0\1\4\7\0\1\5\16\0\1\6\10\0\1\6"+
    "\1\0\1\7\1\0\1\10\6\0\1\11\7\0\1\12"+
    "\15\0\1\13\20\0\1\7\1\14\5\0\1\15\12\0"+
    "\1\16\1\17";

  private static int [] zzUnpackAction() {
    int [] result = new int[145];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\40\0\100\0\140\0\200\0\0\0\240\0\300"+
    "\0\0\0\340\0\u0100\0\u0120\0\u0140\0\u0160\0\u0180\0\u01a0"+
    "\0\u0140\0\u0120\0\300\0\u01c0\0\u01e0\0\u0200\0\u0220\0\u0120"+
    "\0\u0240\0\u0260\0\u0280\0\u02a0\0\u02c0\0\u02e0\0\u0300\0\u0320"+
    "\0\u0340\0\u0360\0\u0380\0\u03a0\0\u0220\0\u01a0\0\u03c0\0\u03e0"+
    "\0\u0400\0\u0420\0\u0440\0\0\0\u0460\0\u0480\0\u04a0\0\u04c0"+
    "\0\u04e0\0\u0500\0\u0520\0\0\0\u0540\0\u0560\0\u0580\0\u05a0"+
    "\0\u05c0\0\u05e0\0\u0600\0\u0620\0\u0640\0\u0660\0\u0680\0\u06a0"+
    "\0\u06c0\0\u06e0\0\0\0\u0700\0\u0720\0\u0740\0\u0760\0\u0780"+
    "\0\u07a0\0\u07c0\0\u07e0\0\u0800\0\u0820\0\0\0\u0840\0\0"+
    "\0\u0860\0\u0880\0\u08a0\0\u08c0\0\u08e0\0\u0900\0\0\0\u0920"+
    "\0\u0940\0\u0960\0\u0980\0\u09a0\0\u09c0\0\u09e0\0\0\0\u0a00"+
    "\0\u0a20\0\u0a40\0\u0a60\0\u0a80\0\u0aa0\0\u0ac0\0\u0ae0\0\u0b00"+
    "\0\u0b20\0\u0b40\0\u0b60\0\u0b80\0\0\0\u0ba0\0\u0bc0\0\u0be0"+
    "\0\u0c00\0\u0c20\0\u0c40\0\u0c60\0\u0c80\0\u0ca0\0\u0cc0\0\u0ce0"+
    "\0\u0d00\0\u0d20\0\u0d40\0\u0d60\0\u0d80\0\u0960\0\0\0\u0da0"+
    "\0\u0dc0\0\u0de0\0\u0e00\0\u0e20\0\0\0\u0e40\0\u0e60\0\u0e80"+
    "\0\u0ea0\0\u0ec0\0\u0ee0\0\u0f00\0\u0f20\0\u0f40\0\u0f60\0\0"+
    "\0\0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[145];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\40\0\1\6\1\7\2\6\1\10\33\6\1\11\1\12"+
    "\1\13\1\6\1\14\1\6\15\11\1\15\14\11\1\6"+
    "\1\16\1\17\1\6\1\20\16\6\1\21\15\6\1\7"+
    "\2\6\1\22\16\6\1\21\14\6\2\0\1\6\42\0"+
    "\1\23\1\24\5\0\1\25\25\0\1\13\36\0\1\26"+
    "\1\27\42\0\1\30\1\24\1\31\4\0\1\32\1\33"+
    "\1\34\1\0\1\35\1\0\1\36\2\0\1\37\1\40"+
    "\1\41\1\42\3\0\1\31\2\0\1\41\23\0\1\43"+
    "\16\0\1\17\36\0\1\44\1\45\42\0\1\46\1\24"+
    "\1\31\4\0\1\32\1\33\1\34\1\0\1\35\1\0"+
    "\1\47\2\0\1\37\1\50\1\41\1\42\3\0\1\31"+
    "\2\0\1\41\7\0\1\51\35\0\1\25\7\0\1\52"+
    "\24\0\1\27\36\0\1\53\1\54\66\0\1\55\13\0"+
    "\1\32\1\0\1\56\5\0\1\57\2\0\1\60\1\0"+
    "\1\61\2\0\1\62\1\63\5\0\1\56\3\0\13\55"+
    "\1\64\1\0\1\55\1\65\21\55\17\0\1\66\35\0"+
    "\1\67\3\0\1\70\43\0\1\71\1\0\1\72\7\0"+
    "\1\72\11\0\1\73\17\0\1\55\24\0\1\74\14\0"+
    "\1\55\11\0\1\41\1\75\47\0\1\76\43\0\1\77"+
    "\17\0\1\45\62\0\1\100\1\0\1\72\7\0\1\72"+
    "\33\0\1\55\14\0\1\101\45\0\1\102\23\0\1\54"+
    "\35\0\13\55\1\64\1\0\23\55\31\0\1\57\13\0"+
    "\1\57\5\0\1\103\41\0\1\104\47\0\1\105\1\0"+
    "\1\106\7\0\1\106\11\0\1\107\17\0\1\57\41\0"+
    "\1\57\4\0\13\55\1\64\1\0\2\55\1\110\20\55"+
    "\24\0\1\111\42\0\1\112\7\0\1\112\16\0\1\113"+
    "\21\0\13\71\1\114\1\0\23\71\30\0\1\115\41\0"+
    "\1\55\5\0\13\74\1\116\24\74\27\0\1\117\7\0"+
    "\1\117\5\0\1\76\5\0\1\120\1\121\32\0\1\122"+
    "\30\0\13\100\1\103\1\0\23\100\11\0\1\123\45\0"+
    "\1\124\47\0\1\125\7\0\1\125\5\0\1\105\5\0"+
    "\1\64\54\0\1\126\41\0\1\57\5\0\5\55\1\110"+
    "\5\55\1\127\1\0\23\55\17\0\1\130\26\0\1\55"+
    "\42\0\1\131\26\0\2\132\1\0\35\132\31\0\1\133"+
    "\43\0\1\134\7\0\1\121\5\0\1\120\45\0\1\135"+
    "\30\0\1\136\32\0\1\124\5\0\1\137\32\0\1\57"+
    "\62\0\1\140\24\0\1\141\36\0\1\142\22\0\2\132"+
    "\1\143\1\132\1\144\33\132\17\0\1\55\37\0\1\145"+
    "\43\0\1\146\25\0\1\147\45\0\1\57\37\0\1\150"+
    "\42\0\1\151\21\0\1\152\33\0\2\132\1\143\1\132"+
    "\2\144\6\132\1\153\23\132\5\0\1\145\30\0\1\154"+
    "\24\0\1\155\21\0\1\147\5\0\1\156\32\0\1\157"+
    "\31\0\13\151\1\160\24\151\5\0\1\152\6\0\1\161"+
    "\23\0\2\132\1\143\1\132\1\144\1\153\14\132\1\162"+
    "\15\132\14\163\1\0\23\163\4\156\1\164\33\156\21\0"+
    "\1\165\16\0\4\160\1\166\33\160\5\0\1\161\14\0"+
    "\1\167\15\0\2\132\1\143\1\132\1\144\20\132\1\170"+
    "\12\132\14\163\1\171\23\163\4\156\2\164\6\156\1\172"+
    "\23\156\17\0\1\173\20\0\4\160\2\166\6\160\1\174"+
    "\23\160\25\0\1\175\12\0\2\132\1\143\1\132\1\144"+
    "\1\170\5\132\1\176\24\132\5\0\1\171\5\0\1\177"+
    "\23\0\1\200\4\156\1\164\1\172\1\201\31\156\20\0"+
    "\1\202\17\0\4\160\1\166\1\174\12\160\1\203\17\160"+
    "\5\0\1\175\5\0\1\116\31\0\1\200\5\0\1\177"+
    "\24\0\4\156\1\164\2\156\1\204\30\156\5\0\1\202"+
    "\5\0\1\205\1\206\23\0\4\160\1\166\14\160\1\207"+
    "\16\160\4\156\1\164\3\156\1\210\27\156\5\0\1\206"+
    "\5\0\1\205\24\0\4\160\1\166\11\160\1\211\21\160"+
    "\4\156\1\164\4\156\1\212\26\156\4\160\1\166\4\160"+
    "\1\213\26\160\4\156\1\164\5\156\1\214\25\156\4\160"+
    "\1\166\10\160\1\215\22\160\4\156\1\164\4\156\1\216"+
    "\26\156\4\160\1\166\15\160\1\217\15\160\4\156\1\164"+
    "\1\216\5\156\1\220\24\156\4\160\1\166\1\217\5\160"+
    "\1\221\24\160";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3968];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\10\4\0\1\11\2\1\1\11\11\1\22\0\1\1"+
    "\6\0\1\11\7\0\1\11\16\0\1\11\10\0\1\1"+
    "\1\0\1\11\1\0\1\11\6\0\1\11\7\0\1\11"+
    "\15\0\1\11\20\0\1\1\1\11\5\0\1\11\12\0"+
    "\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[145];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    protected static WikiLogger logger = WikiLogger.getLogger(JAMWikiPostProcessor.class.getName());
    
    /**
     *
     */
    public void init(ParserInput parserInput, ParserDocument parserDocument, int mode) throws Exception {
        this.parserInput = parserInput;
        this.parserDocument = parserDocument;
        this.mode = mode;
        // validate parser settings
        boolean validated = true;
        if (this.mode != JFlexParser.MODE_LAYOUT) validated = false;
        if (this.parserInput == null) validated = false;
        if (this.parserInput.getTableOfContents() == null) validated = false;
        if (!validated) {
            throw new Exception("Parser info not properly initialized");
        }
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JAMWikiPostProcessor(java.io.Reader in) {
      yybegin(NORMAL);
    states.add(new Integer(yystate()));
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JAMWikiPostProcessor(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 142) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 14: 
          { logger.finer("nowiki: " + yytext() + " (" + yystate() + ")");
    WikiNowikiTag parserTag = new WikiNowikiTag();
    return this.parseToken(yytext(), parserTag);
          }
        case 16: break;
        case 5: 
          { logger.finer("nonparagraphstart: " + yytext() + " (" + yystate() + ")");
    StringBuffer output = new StringBuffer();
    if (yystate() == P) {
        output.append("</p>");
        endState();
    }
    beginState(NONPARAGRAPH);
    return output.toString() + yytext();
          }
        case 17: break;
        case 10: 
          { logger.finer("htmlpreend: " + yytext() + " (" + yystate() + ")");
    endState();
    HtmlPreTag parserTag = new HtmlPreTag();
    return this.parseToken(yytext(), parserTag);
          }
        case 18: break;
        case 6: 
          { logger.finer("nonparagraphend: " + yytext() + " (" + yystate() + ")");
    if (yystate() == NONPARAGRAPH) {
        endState();
    } else {
        logger.warning("Attempt to end nonparagraph state while state is not nonparagraph for text: " + yytext());
    }
    return yytext();
          }
        case 19: break;
        case 3: 
          { logger.finer("end of paragraph: " + yytext() + " (" + yystate() + ")");
    endState();
    return "</p>" + yytext();
          }
        case 20: break;
        case 8: 
          { // for layout purposes <br> tags should not affect paragraph layout in any way.
    logger.finer("break: " + yytext() + " (" + yystate() + ")");
    return yytext();
          }
        case 21: break;
        case 4: 
          { logger.finer("emptyline: " + yytext() + " (" + yystate() + ")");
    StringBuffer output = new StringBuffer();
    if (yystate() == P) {
        output.append("</p>");
        endState();
    }
    return output.toString() + "\n<p><br /></p>";
          }
        case 22: break;
        case 1: 
          { // no need to log this
    CharacterTag parserTag = new CharacterTag();
    return this.parseToken(yytext(), parserTag);
          }
        case 23: break;
        case 12: 
          { // for layout purposes and <a name="foo"></a> link should be returned without
    // changes, but should not affect paragraph layout in any way.
    logger.finer("anchorname: " + yytext() + " (" + yystate() + ")");
    return yytext();
          }
        case 24: break;
        case 11: 
          { logger.finer("toc: " + yytext() + " (" + yystate() + ")");
    return this.parserInput.getTableOfContents().attemptTOCInsertion();
          }
        case 25: break;
        case 13: 
          { logger.finer("references: " + yytext() + " (" + yystate() + ")");
    WikiReferencesTag parserTag = new WikiReferencesTag();
    return this.parseToken(yytext(), parserTag);
          }
        case 26: break;
        case 7: 
          { // <hr> and <td> tags _with no newlines_ should be ignored for the sake of paragraph parsing
    logger.finer("noparagraph: " + yytext() + " (" + yystate() + ")");
    return yytext();
          }
        case 27: break;
        case 15: 
          { logger.finer("javascript: " + yytext() + " (" + yystate() + ")");
    return yytext();
          }
        case 28: break;
        case 2: 
          { logger.finer("paragraphstart: " + yytext() + " (" + yystate() + ")");
    beginState(P);
    return "<p>" + yytext();
          }
        case 29: break;
        case 9: 
          { logger.finer("htmlprestart: " + yytext() + " (" + yystate() + ")");
    beginState(PRE);
    HtmlPreTag parserTag = new HtmlPreTag();
    return this.parseToken(yytext(), parserTag);
          }
        case 30: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {     StringBuffer output = new StringBuffer();
    if (yystate() == P) {
        endState();
        output.append("</p>");
    }
    return (output.length() == 0) ? null : output.toString();
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
