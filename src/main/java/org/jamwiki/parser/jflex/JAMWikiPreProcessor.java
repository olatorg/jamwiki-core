/* The following code was generated by JFlex 1.4.1 on 1/22/07 9:57 AM */

/*
 * The pre-processor performs initial parsing steps used to initialize
 * metadata, replace syntax that should not be saved to the database,
 * and prepare the document for the full parsing by the processor.
 */
package org.jamwiki.parser.jflex;

import org.jamwiki.Environment;
import org.jamwiki.parser.ParserInput;
import org.jamwiki.parser.ParserDocument;
import org.jamwiki.utils.WikiLogger;
import org.springframework.util.StringUtils;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 1/22/07 9:57 AM from the specification file
 * <tt>/home/guido/workspace/jamwiki-olat/src/lex/jamwiki-preprocessor.jflex</tt>
 */
public class JAMWikiPreProcessor extends AbstractLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int TEMPLATE = 8;
  public static final int WIKIPRE = 6;
  public static final int YYINITIAL = 0;
  public static final int PRE = 4;
  public static final int NORMAL = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  2,  3,  3,  4,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\17\1\2\1\0\1\0\1\1\22\0\1\4\1\20\13\0"+
    "\1\21\1\0\1\13\12\0\1\26\1\0\1\3\1\0\1\12\2\0"+
    "\1\31\1\0\1\37\1\41\1\16\1\33\1\34\1\24\1\10\1\0"+
    "\1\11\1\32\1\30\1\5\1\6\1\14\1\0\1\15\1\27\1\25"+
    "\1\40\1\0\1\7\1\0\1\42\1\0\1\22\1\0\1\23\3\0"+
    "\1\31\1\0\1\37\1\41\1\16\1\33\1\34\1\24\1\10\1\0"+
    "\1\11\1\32\1\30\1\5\1\6\1\14\1\0\1\15\1\27\1\25"+
    "\1\40\1\0\1\7\1\0\1\42\1\0\1\35\1\0\1\36\1\43"+
    "\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\11\1\3\2\3\3\1\4\1\5\6\0\1\6"+
    "\1\0\1\7\7\0\1\6\10\0\1\10\13\0\1\10"+
    "\4\0\1\11\1\0\1\12\2\0\1\10\7\0\1\13"+
    "\3\0\1\14\1\0\1\15\44\0\1\12\22\0\1\16"+
    "\13\0\1\17\15\0\1\12\15\0\1\20\4\0\1\21";

  private static int [] zzUnpackAction() {
    int [] result = new int[187];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\110\0\154\0\220\0\264\0\330\0\0"+
    "\0\374\0\u0120\0\u0144\0\u0168\0\u018c\0\u01b0\0\u01d4\0\u01f8"+
    "\0\0\0\u021c\0\u01f8\0\0\0\u0240\0\u0264\0\u0288\0\0"+
    "\0\u02ac\0\u02d0\0\u02f4\0\u0318\0\u033c\0\u0360\0\u0384\0\u03a8"+
    "\0\0\0\u01b0\0\u01d4\0\u03cc\0\u03f0\0\u01f8\0\u0264\0\u0414"+
    "\0\0\0\u0438\0\u045c\0\u0480\0\u04a4\0\u04c8\0\u04ec\0\u0510"+
    "\0\u0534\0\u0558\0\u057c\0\u05a0\0\u05c4\0\u05e8\0\u060c\0\u0630"+
    "\0\u0654\0\u0678\0\u069c\0\u06c0\0\u06e4\0\u0708\0\u072c\0\u0750"+
    "\0\u0774\0\u0798\0\0\0\u07bc\0\0\0\u07e0\0\u0804\0\0"+
    "\0\u0828\0\u084c\0\u0870\0\u0894\0\u08b8\0\u08dc\0\u0900\0\0"+
    "\0\u0924\0\u0948\0\u096c\0\0\0\u0990\0\0\0\u09b4\0\u09d8"+
    "\0\u09fc\0\u0a20\0\u0a44\0\u0a68\0\u0a8c\0\u0ab0\0\u0ad4\0\u0af8"+
    "\0\u0b1c\0\u0b40\0\u0b64\0\u0b88\0\u0bac\0\u0bd0\0\u0bf4\0\u0c18"+
    "\0\u0c3c\0\u0c60\0\u0c84\0\u0ca8\0\u0ccc\0\u0cf0\0\u0d14\0\u0d38"+
    "\0\u0d5c\0\u0d80\0\u0da4\0\u0dc8\0\u0dec\0\u0e10\0\u0e34\0\u0e58"+
    "\0\u0e7c\0\u0ea0\0\u0ec4\0\u0ee8\0\u0f0c\0\u0f30\0\u0f54\0\u0f78"+
    "\0\u0f9c\0\u0ec4\0\u0fc0\0\u0fe4\0\u1008\0\u102c\0\u1050\0\u1074"+
    "\0\u1098\0\u10bc\0\u10e0\0\u1104\0\u1128\0\0\0\u114c\0\u1170"+
    "\0\u1194\0\u11b8\0\u11dc\0\u1200\0\u1224\0\u1248\0\u126c\0\u1290"+
    "\0\u12b4\0\0\0\u12d8\0\u12fc\0\u1320\0\u1344\0\u1368\0\u138c"+
    "\0\u13b0\0\u13d4\0\u13f8\0\u141c\0\u1440\0\u1464\0\u1488\0\u0fe4"+
    "\0\u14ac\0\u14d0\0\u14f4\0\u1518\0\u153c\0\u1560\0\u1584\0\u15a8"+
    "\0\u15cc\0\u15f0\0\u1614\0\u1638\0\u165c\0\0\0\u1680\0\u16a4"+
    "\0\u16c8\0\u16ec\0\0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[187];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\44\0\1\10\1\11\1\10\1\12\16\10\1\13\12\10"+
    "\1\14\5\10\1\15\1\10\1\11\1\10\1\12\1\16"+
    "\15\10\1\13\12\10\1\14\5\10\1\15\1\10\1\11"+
    "\1\10\1\17\41\10\1\11\1\10\1\20\40\10\1\21"+
    "\1\22\1\21\1\23\1\16\37\21\1\24\1\25\1\24"+
    "\1\26\31\24\1\27\1\30\5\24\2\0\1\10\45\0"+
    "\1\31\1\32\2\0\1\33\3\0\1\34\3\0\1\35"+
    "\45\0\1\36\56\0\1\37\51\0\1\40\1\41\2\0"+
    "\1\41\1\42\12\41\1\0\24\41\4\0\1\43\1\44"+
    "\5\0\1\45\34\0\1\46\1\44\40\0\1\21\43\0"+
    "\1\24\45\0\1\47\1\50\2\0\1\33\70\0\1\51"+
    "\12\0\1\31\1\32\2\0\1\33\3\0\1\34\35\0"+
    "\1\52\42\0\1\53\53\0\1\54\47\0\1\55\22\0"+
    "\1\56\2\0\1\56\1\57\3\56\1\60\12\56\1\0"+
    "\20\56\35\0\1\61\51\0\1\62\6\0\1\63\41\0"+
    "\1\45\7\0\1\64\35\0\1\65\44\0\1\66\1\67"+
    "\72\0\1\70\22\0\1\71\46\0\1\72\22\0\1\56"+
    "\2\0\20\56\1\73\21\56\2\0\1\56\1\57\3\56"+
    "\1\60\12\56\1\73\21\56\2\0\20\56\1\73\4\56"+
    "\1\74\13\56\1\75\2\0\32\75\2\0\5\75\43\0"+
    "\1\76\7\0\1\66\51\0\1\77\36\0\1\67\43\0"+
    "\1\100\40\0\1\101\70\0\1\102\15\0\1\71\5\0"+
    "\1\103\31\0\21\72\1\104\22\72\23\0\1\105\20\0"+
    "\1\56\2\0\20\56\1\73\5\56\1\106\12\56\1\75"+
    "\2\0\32\75\1\0\1\107\5\75\43\0\1\110\16\0"+
    "\1\111\36\0\1\112\71\0\1\113\44\0\1\114\3\0"+
    "\21\72\1\115\22\72\1\56\2\0\20\56\1\73\10\56"+
    "\1\116\7\56\36\0\1\117\11\0\1\111\5\0\1\120"+
    "\41\0\1\121\65\0\1\122\52\0\1\123\2\0\12\72"+
    "\1\124\6\72\1\115\22\72\1\56\2\0\13\56\1\125"+
    "\4\56\1\73\20\56\36\0\1\126\11\0\1\121\5\0"+
    "\1\127\71\0\1\130\21\0\1\131\25\0\1\56\2\0"+
    "\20\56\1\73\2\56\1\132\15\56\3\127\1\133\40\127"+
    "\41\0\1\134\10\0\1\135\35\0\1\132\2\0\17\132"+
    "\1\136\1\73\20\132\3\127\2\133\6\127\1\137\30\127"+
    "\16\0\1\140\32\0\1\141\36\0\1\56\2\0\17\56"+
    "\1\142\1\73\1\143\3\56\1\144\2\56\1\145\10\56"+
    "\3\127\1\133\1\137\1\146\36\127\4\0\1\140\5\0"+
    "\1\147\1\150\62\0\1\151\11\0\1\152\2\0\20\152"+
    "\1\73\20\152\1\56\2\0\20\56\1\73\1\56\1\153"+
    "\17\56\2\0\20\56\1\73\5\56\1\154\13\56\2\0"+
    "\5\56\1\155\12\56\1\73\1\56\1\156\16\56\3\127"+
    "\1\133\2\127\1\157\35\127\3\147\1\160\40\147\4\0"+
    "\1\150\5\0\1\147\73\0\1\161\1\0\1\152\2\0"+
    "\20\152\1\162\20\152\1\56\2\0\20\56\1\73\1\56"+
    "\1\163\17\56\2\0\5\56\1\164\12\56\1\73\21\56"+
    "\2\0\20\56\1\73\6\56\1\165\12\56\2\0\11\56"+
    "\1\166\6\56\1\73\20\56\3\127\1\133\3\127\1\167"+
    "\34\127\3\147\2\160\6\147\1\170\30\147\4\0\1\161"+
    "\5\0\1\171\1\172\53\0\1\173\20\0\1\56\2\0"+
    "\11\56\1\174\6\56\1\73\21\56\2\0\20\56\1\73"+
    "\6\56\1\175\12\56\2\0\13\56\1\166\4\56\1\73"+
    "\21\56\2\0\20\56\1\73\2\56\1\176\15\56\3\127"+
    "\1\133\4\127\1\177\33\127\3\147\1\160\1\170\1\200"+
    "\36\147\3\171\1\201\40\171\4\0\1\172\5\0\1\171"+
    "\31\0\1\202\2\0\17\202\1\203\1\204\20\202\1\56"+
    "\2\0\20\56\1\73\2\56\1\176\1\166\15\56\2\0"+
    "\20\56\1\73\1\56\1\205\17\56\2\0\10\56\1\206"+
    "\7\56\1\73\20\56\3\127\1\133\5\127\1\207\32\127"+
    "\3\147\1\160\2\147\1\210\35\147\3\171\2\201\6\171"+
    "\1\211\30\171\22\0\1\212\1\0\1\213\3\0\1\214"+
    "\2\0\1\215\33\0\1\216\20\0\1\56\2\0\3\56"+
    "\1\217\14\56\1\73\21\56\2\0\10\56\1\220\7\56"+
    "\1\73\20\56\3\127\1\133\4\127\1\221\33\127\3\147"+
    "\1\160\4\147\1\222\33\147\3\171\1\201\1\211\3\171"+
    "\1\223\33\171\1\224\2\0\20\224\1\0\20\224\25\0"+
    "\1\225\47\0\1\226\22\0\1\227\14\0\1\230\16\0"+
    "\1\56\2\0\20\56\1\73\2\56\1\220\15\56\1\231"+
    "\2\0\20\231\1\73\20\231\3\127\1\133\1\221\5\127"+
    "\1\232\31\127\3\147\1\160\1\147\1\233\36\147\3\171"+
    "\1\201\1\171\1\234\36\171\1\224\2\0\20\224\1\235"+
    "\20\224\25\0\1\236\26\0\1\237\65\0\1\240\25\0"+
    "\1\241\27\0\1\231\2\0\20\231\1\242\20\231\3\147"+
    "\1\160\33\147\1\243\4\147\3\171\1\201\33\171\1\244"+
    "\4\171\23\0\1\202\34\0\1\245\61\0\1\246\27\0"+
    "\1\241\53\0\1\247\15\0\1\202\2\0\17\202\1\203"+
    "\1\250\20\202\3\147\1\160\26\147\1\251\11\147\3\171"+
    "\1\201\26\171\1\252\11\171\26\0\1\247\1\241\41\0"+
    "\1\253\31\0\1\254\30\0\3\147\1\160\34\147\1\255"+
    "\3\147\3\171\1\201\34\171\1\256\3\171\6\0\1\257"+
    "\50\0\1\260\30\0\3\147\1\160\35\147\1\261\2\147"+
    "\3\171\1\201\35\171\1\262\2\171\26\0\1\260\15\0"+
    "\1\263\2\0\20\263\1\0\20\263\3\147\1\160\12\147"+
    "\1\264\25\147\3\171\1\201\12\171\1\265\25\171\1\263"+
    "\2\0\20\263\1\202\20\263\3\147\1\160\1\264\5\147"+
    "\1\266\31\147\3\171\1\201\2\171\1\267\40\171\1\201"+
    "\1\171\1\270\41\171\1\201\26\171\1\271\14\171\1\201"+
    "\36\171\1\272\4\171\1\201\1\272\5\171\1\273\31\171";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5904];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\10\6\0\1\11\10\1\1\11\2\1\1\11\3\1"+
    "\1\11\6\0\1\1\1\0\1\11\7\0\1\11\10\0"+
    "\1\1\13\0\1\1\4\0\1\11\1\0\1\11\2\0"+
    "\1\11\7\0\1\11\3\0\1\11\1\0\1\11\44\0"+
    "\1\1\22\0\1\11\13\0\1\11\15\0\1\1\15\0"+
    "\1\11\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[187];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    protected static WikiLogger logger = WikiLogger.getLogger(JAMWikiPreProcessor.class.getName());
    protected boolean allowHTML = false;
    protected int templateCharCount = 0;
    protected String templateString = "";
    
    /**
     *
     */
    public void init(ParserInput parserInput, ParserDocument parserDocument, int mode) throws Exception {
        this.parserInput = parserInput;
        this.parserDocument = parserDocument;
        this.mode = mode;
        boolean validated = true;
        // validate parser settings
        if (this.mode > JFlexParser.MODE_PREPROCESS) validated = false;
        if (this.mode == JFlexParser.MODE_SAVE) {
            if (this.parserInput.getUserIpAddress() == null) validated = false;
        }
        if (this.mode >= JFlexParser.MODE_TEMPLATE) {
            if (this.parserInput.getVirtualWiki() == null) validated = false;
            if (this.parserInput.getTopicName() == null) validated = false;
        }
        if (!validated) {
            throw new Exception("Parser info not properly initialized");
        }
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JAMWikiPreProcessor(java.io.Reader in) {
      allowHTML = Environment.getBooleanValue(Environment.PROP_PARSER_ALLOW_HTML);
    yybegin(NORMAL);
    states.add(new Integer(yystate()));
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JAMWikiPreProcessor(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 162) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 15: 
          { logger.finer("nowiki: " + yytext() + " (" + yystate() + ")");
    WikiNowikiTag parserTag = new WikiNowikiTag();
    return this.parseToken(yytext(), parserTag);
          }
        case 18: break;
        case 16: 
          { logger.finer("noinclude: " + yytext() + " (" + yystate() + ")");
    NoIncludeTag parserTag = new NoIncludeTag();
    return this.parseToken(yytext(), parserTag);
          }
        case 19: break;
        case 5: 
          { logger.finer("templateendchar: " + yytext() + " (" + yystate() + ")");
    String raw = yytext();
    this.templateString += raw;
    this.templateCharCount -= raw.length();
    if (this.templateCharCount == 0) {
        endState();
        String value = new String(this.templateString);
        this.templateString = "";
        TemplateTag parserTag = new TemplateTag();
        return this.parseToken(value, parserTag);
    }
    return "";
          }
        case 20: break;
        case 6: 
          { logger.finer("templatestart: " + yytext() + " (" + yystate() + ")");
    String raw = yytext();
    if (!Environment.getBooleanValue(Environment.PROP_PARSER_ALLOW_TEMPLATES)) {
        return yytext();
    }
    this.templateString += raw;
    this.templateCharCount += 2;
    if (yystate() != TEMPLATE) {
        beginState(TEMPLATE);
    }
    return "";
          }
        case 21: break;
        case 3: 
          { // no need to log this
    String raw = yytext();
    this.templateString += raw;
    return "";
          }
        case 22: break;
        case 10: 
          { logger.finer("wikilink: " + yytext() + " (" + yystate() + ")");
    WikiLinkTag parserTag = new WikiLinkTag();
    return this.parseToken(yytext(), parserTag);
          }
        case 23: break;
        case 7: 
          { logger.finer("wikiprestart: " + yytext() + " (" + yystate() + ")");
    // rollback the one non-pre character so it can be processed
    yypushback(yytext().length() - 1);
    if (yystate() != WIKIPRE) {
        beginState(WIKIPRE);
    }
    return yytext();
          }
        case 24: break;
        case 9: 
          { logger.finer("htmlprestart: " + yytext() + " (" + yystate() + ")");
    if (allowHTML) {
        beginState(PRE);
    }
    HtmlPreTag parserTag = new HtmlPreTag();
    return this.parseToken(yytext(), parserTag);
          }
        case 25: break;
        case 8: 
          { logger.finer("wikisignature: " + yytext() + " (" + yystate() + ")");
    WikiSignatureTag parserTag = new WikiSignatureTag();
    return this.parseToken(yytext(), parserTag);
          }
        case 26: break;
        case 11: 
          { logger.finer("htmlpreend: " + yytext() + " (" + yystate() + ")");
    // state only changes to pre if allowHTML is true, so no need to check here
    endState();
    HtmlPreTag parserTag = new HtmlPreTag();
    return this.parseToken(yytext(), parserTag);
          }
        case 27: break;
        case 1: 
          { // no need to log this
    CharacterTag parserTag = new CharacterTag();
    return this.parseToken(yytext(), parserTag);
          }
        case 28: break;
        case 13: 
          { logger.finer("templateparam: " + yytext() + " (" + yystate() + ")");
    String raw = yytext();
    return raw;
          }
        case 29: break;
        case 4: 
          { logger.finer("templatestartchar: " + yytext() + " (" + yystate() + ")");
    String raw = yytext();
    this.templateString += raw;
    this.templateCharCount += raw.length();
    if (this.templateString.equals("{{{")) {
        // param, not a template
        this.templateCharCount = 0;
        endState();
        String value = new String(this.templateString);
        this.templateString = "";
        return value;
    }
    return "";
          }
        case 30: break;
        case 14: 
          { logger.finer("imagelinkcaption: " + yytext() + " (" + yystate() + ")");
    WikiLinkTag parserTag = new WikiLinkTag();
    return this.parseToken(yytext(), parserTag);
          }
        case 31: break;
        case 17: 
          { logger.finer("includeonly: " + yytext() + " (" + yystate() + ")");
    IncludeOnlyTag parserTag = new IncludeOnlyTag();
    return this.parseToken(yytext(), parserTag);
          }
        case 32: break;
        case 12: 
          { logger.finer("htmlcomment: " + yytext() + " (" + yystate() + ")");
    HtmlCommentTag parserTag = new HtmlCommentTag();
    return this.parseToken(yytext(), parserTag);
          }
        case 33: break;
        case 2: 
          { logger.finer("wikipreend: " + yytext() + " (" + yystate() + ")");
    endState();
    // rollback the one non-pre character so it can be processed
    yypushback(1);
    return yytext();
          }
        case 34: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {     StringBuffer output = new StringBuffer();
    if (StringUtils.hasText(this.templateString)) {
        // FIXME - this leaves unparsed text
        output.append(this.templateString);
        this.templateString = "";
    }
    return (output.length() == 0) ? null : output.toString();
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
